<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.7 Maintainer: fernandoc Status: ready -->

<sect1 id="language.escaping">
 <title>Escapando da interpretação do Smarty</title>
 <para>
  Algumas vezes é desejável ou mesmo necessário fazer o Smarty ignorar sessões
  que em outro caso ele interpretaria. Um exemplo classico é embutindo Javascript ou
  código CSS no template. O problema aparece porque estas linguagens usam os
  caracteres { e } que são os
  <link linkend="language.function.ldelim">delimitadores</link> padrão para o Smarty.
 </para>

 <para>
  A coisa mais simples é evitar a situação em sí separando o seu código Javascript e
  CSS nos seus próprios arquivos e então usar os métodos padrões do HTML para acessa-los.
 </para>

 <para>
  Incluir conteúdo literal é possível usando blocos <link
  linkend="language.function.literal">{literal} .. {/literal}</link>.
  De modo similar ao uso de entidades HTML, você pode usar <link
  linkend="language.function.ldelim">{ldelim}</link>,<link
  linkend="language.function.ldelim">{rdelim}</link> ou <link
  linkend="language.variables.smarty.ldelim">{$smarty.ldelim}</link>
  para mostrar os delimitadores atuais.
 </para>

 <para>
  As vezes é conveniente simplesmente mudar <link
  linkend="variable.left.delimiter">$left_delimiter</link> e
  <link linkend="variable.right.delimiter">$right_delimiter</link>.
 </para>
 <example>
  <title>Exemplo de modificar os delimitadores</title>
  <programlisting role="php">
<![CDATA[
<?php

$smarty = new Smarty;
$smarty->left_delimiter = '<!--{';
$smarty->right_delimiter = '}-->';
$smarty->assign('foo', 'bar');
$smarty->assign('name', 'Albert');
$smarty->display('example.tpl');

?>
]]>
  </programlisting>
  <para>
   Aonde example.tpl é:
  </para>
  <programlisting>
<![CDATA[
Welcome <!--{$name}--> to Smarty
<script language="javascript">
  var foo = <!--{$foo}-->;
  function dosomething() {
    alert("foo is " + foo);
  }
  dosomething();
</script>
]]>
  </programlisting>
 </example>
 <para>
  Veja também <link linkend="language.modifier.escape">escape modifier</link>
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
