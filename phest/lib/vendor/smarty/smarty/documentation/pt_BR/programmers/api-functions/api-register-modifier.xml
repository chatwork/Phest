<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: ready -->		
<sect1 id="api.register.modifier">
         <title>register_modifier</title>
         <funcsynopsis>
          <funcprototype>
           <funcdef>void <function>register_modifier</function></funcdef>
           <paramdef>string <parameter>name</parameter></paramdef>
           <paramdef>mixed <parameter>impl</parameter></paramdef>
          </funcprototype>
         </funcsynopsis>
         <para>
	  Use isso para modificar dinamicamente plugins registrados.
	  Passe no template o nome do modificador, seguido da função PHP
	  que implemente isso.
         </para>
         <para>
	  A chamada da função-php <parameter>impl</parameter> 
	  pode ser (a) uma strin contendo o nome da função
	  ou (b) um array no formato
	  <literal>array(&amp;$object, $method)</literal> com
	  <literal>&amp;$object</literal> sendo uma referência para um
	  objeto e <literal>$method</literal> sendo uma string
	  contendo o nome do método ou (c) um array no formato
	  <literal>array(&amp;$class, $method)</literal> com
	  <literal>$class</literal> sendo um nome de classe e
	  <literal>$method</literal> sendo um método desta classe.
	</para>

<example>
<title>register_modifier</title>
<programlisting>
// let's map PHP's stripslashes function to a Smarty modifier.

$smarty->register_modifier("sslash","stripslashes");

// now you can use {$var|sslash} to strip slashes from variables</programlisting>
</example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->