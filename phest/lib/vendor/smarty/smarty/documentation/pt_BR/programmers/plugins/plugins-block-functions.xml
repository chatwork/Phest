<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: ready -->   
<sect1 id="plugins.block.functions"><title>Block Functions</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>smarty_block_<replaceable>name</replaceable></function></funcdef>
      <paramdef>array <parameter>$params</parameter></paramdef>
      <paramdef>mixed <parameter>$content</parameter></paramdef>
      <paramdef>object <parameter>&amp;$smarty</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Funções de Block são funções da forma: {func} .. {/func}. Em outras palavras, ele enclausura
     um bloco de template e opera no conteúdo deste bloco. Funções de Block tem precedência sobre 
     funções customizadas com mesmo nome,
     assim, você não pode ter ambas, função customizável {func} e
     função de Bloco {func} .. {/func}.
    </para>
    <para>
     Por definição a implementação de sua função é chamada duas vezes pela Smarty: uma vez pela tag de abertura,
    e outra pela tag de fechamento 
    (veja <literal>&amp;$repeat</literal> abaixo para como mudar isto).
    </para>
    <para>
     Apenas a tag de abertura da função de bloco pode ter atributos. 
     Todos os atributos passados para as funções de
     template estão contidos em <parameter>$params</parameter> como um array associativo. Você pode ou acessar
     esses valores diretamente, i.e. <varname>$params['start']</varname>
     ou usar <varname>extract($params)</varname> 
     para importá-los para dentro da tabela símbolo. Os atributos da tag de
     abertura são também acessíveis a sua função 
      quando processando a tag de fechamento.
    </para>
    <para>
     O valor da variável <parameter>$content</parameter> 
     depende de que se sua função é chamada pela tag de 
     fechamento ou de abertura. Caso seja a de abertura, ele será
     <literal>null</literal>, se for a de fechamento
     o valor será do conteúdo do bloco de template. 
     Note que o bloco de template já terá sido processado pela
     Smarty, então tudo que você receberá é saída do template, não o template original.
    </para>

    <para>
     O parâmetro <parameter>&amp;$repeat</parameter> é passado por 
     referência para a função de implementação
      e fornece uma possibilidade para ele controlar quantas
      vezes o bloco é mostrado. Por definição
       <parameter>$repeat</parameter> é <literal>true</literal> na primeira chamada da block-function
     (a tag de abertura do bloco) e <literal>false</literal>
     em todas as chamadas subsequentes à função de bloco
     (a tag de fechamento do bloco). Cada vez que a
     implementação da função retorna com o <parameter>&amp;$repeat</parameter> 
     sendo true, o conteúdo entre {func} .. {/func} é avaliado 
     e a implementação da função é chamada novamente com
     o novo conteúdo do bloco no parâmetro <parameter>$content</parameter>.

	</para>

    <para>
     Se você tem funções de bloco aninhadas, é possível 
     descobrir qual é a função de bloco pai acessando
     a variável <varname>$smarty->_tag_stack</varname>. Apenas faça um var_dump()
     nela e a estrutura estaria visível.
    </para>
    <para>
     See also:
     <link linkend="api.register.block">register_block()</link>,
     <link linkend="api.unregister.block">unregister_block()</link>.
    </para>
    <example>
     <title>função de bloco</title>
     <programlisting>
&lt;?php
/*
 * Smarty plugin
 * -------------------------------------------------------------
 * File:     block.translate.php
 * Type:     block
 * Name:     translate
 * Purpose:  translate a block of text
 * -------------------------------------------------------------
 */
function smarty_block_translate($params, $content, &amp;$smarty)
{
    if (isset($content)) {
        $lang = $params['lang'];
        // do some intelligent translation thing here with $content
        return $translation;
    }
}</programlisting>
    </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->