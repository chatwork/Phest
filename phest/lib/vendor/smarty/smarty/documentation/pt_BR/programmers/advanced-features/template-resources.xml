<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: ready -->
  <sect1 id="template.resources">
   <title>Recursos (Resources)</title>
   <para>
	Os templates podem vir de uma variedade de fontes. Quando você exibe (display) ou
	 busca (fetch) um template, ou inclui um template de dentro de outro template, você 
	 fornece um tipo de recurso, seguido pelo
	 caminho e nome do template apropriado. Se um 
	 recurso não é dado explicitamente o valor de 
	 <link linkend="variable.default.resource.type">$default_resource_type</link> é assumido.
   </para>
   <sect2 id="templates.from.template.dir">
    <title>Templates partindo do $template_dir</title>
    <para>
     Templates a partir do $template_dir não exigem um recurso de template,
     apesar de você usar o arquivo: resource for consistancy.
     Apenas forneça o caminho para o template que você quer usar em relação ao diretório
     root $template_dir.
    </para>
    <example>
     <title>Usando templates partindo do $template_dir</title>
     <programlisting>
// from PHP script
$smarty->display("index.tpl");
$smarty->display("admin/menu.tpl");
$smarty->display("file:admin/menu.tpl"); // Igual ao de cima

{* de dentro do template do Smarty *}
{include file="index.tpl"}
{include file="file:index.tpl"} {* igual ao de cima *}</programlisting>
    </example>
   </sect2>
   <sect2 id="templates.from.any.dir">
    <title>Templates partindo de qualquer diretório</title>
    <para>
     Os Templates de fora do $template_dir exigem o arquivo:
     tipo de recurso do template,
     seguido pelo caminho absoluto e nome do template.
    </para>
    <example>
     <title>usando templates partindo de qualquer diretório</title>
     <programlisting>
// de dentro do script PHP
$smarty->display("file:/export/templates/index.tpl");
$smarty->display("file:/path/to/my/templates/menu.tpl");

{* de dentro do template do Smarty *}
{include file="file:/usr/local/share/templates/navigation.tpl"}</programlisting>
    </example>

    <sect3 id="templates.windows.filepath">
     <title>Caminhos de arquivos do Windows</title>
     <para>
      Se você está usando uma máquina windows, caminhos de arquivos normalmente incluem uma letra
      do drive (C:) no começo do nome do caminho.
      Esteja certo de usar "file:" no caminho para
      evitar conflitos de nome e obter os resultados desejados.
     </para>
     <example>
      <title>usando templates com caminhos de arquivo do windows</title>
      <programlisting>
// de dentro do script PHP
$smarty->display("file:C:/export/templates/index.tpl");
$smarty->display("file:F:/path/to/my/templates/menu.tpl");

{* de dentro do template do Smarty *}
{include file="file:D:/usr/local/share/templates/navigation.tpl"}</programlisting>
     </example>
    </sect3>
   </sect2>

   <sect2 id="templates.from.elsewhere">
    <title>Templates partindo de outras fontes</title>
    <para>
     Você pode resgatar templates usando qualquer fonte possível de você acessar com PHP: banco
      de dados, sockets, LDAP, e assim por diante.
      Você faz isto escrevendo as funções de plugin
      de recurso e registrando elas com o Smarty.
    </para>

    <para>
     Veja a seção <link linkend="plugins.resources">plugins de recurso</link>
     para mais informação sobre as funções
     que você deve fornecer.
    </para>

    <note>
     <para>
      Note que você pode ativar manualmente o recurso de <literal>arquivo</literal> embutido, mas não pode fornecer um recurso que busca templates a partir do sistema de arquivos de alguma outra forma registrando sob um outro nome de recurso.
      <literal>file</literal> resource, but you can provide a resource
      that fetches templates from the file system in some other way by
      registering under another resource name.
     </para>
    </note>
    <example>
     <title>usando recursos customizáveis</title>
     <programlisting>
// no script PHP

// ponha estas funções em algum lugar de sua aplicação
function db_get_template ($tpl_name, &amp;$tpl_source, &amp;$smarty_obj)
{
    // faça o banco de dados chamar aqui para buscar o seu template,
    // preenchendo o $tpl_source
    $sql = new SQL;
    $sql->query("select tpl_source
                   from my_table
                  where tpl_name='$tpl_name'");
    if ($sql->num_rows) {
        $tpl_source = $sql->record['tpl_source'];
        return true;
    } else {
        return false;
    }
}

function db_get_timestamp($tpl_name, &amp;$tpl_timestamp, &amp;$smarty_obj)
{
    // faça o banco de dados chamar daqui para preencher a $tpl_timestamp.
    $sql = new SQL;
    $sql->query("select tpl_timestamp
                   from my_table
                  where tpl_name='$tpl_name'");
    if ($sql->num_rows) {
        $tpl_timestamp = $sql->record['tpl_timestamp'];
        return true;
    } else {
        return false;
    }
}

function db_get_secure($tpl_name, &amp;$smarty_obj)
{
    // assume-se que todos os templates são seguros
    return true;
}

function db_get_trusted($tpl_name, &amp;$smarty_obj)
{
    // não usado para templates
}

// registrar o nome de recurso "db"
$smarty->register_resource("db", array("db_get_template",
                                       "db_get_timestamp",
                                       "db_get_secure",
                                       "db_get_trusted"));

// usando o recurso a partir do script PHP
$smarty->display("db:index.tpl");

{* usando o recurso de dentro do template do Smarty *}
{include file="db:/extras/navigation.tpl"}</programlisting>
    </example>
   </sect2>

   <sect2 id="default.template.handler.function">
    <title>Função Manipuladora de Template Padrão</title>
    <para>
     Você pode especificar a função que é usada para devolver o conteúdo do template no evento
     em que o template não pode ser devolvido de seu recurso. Um uso disto é para criar templates
     que não existem "on-the-fly" 
     (templates cujo conteúdo flutua muito, bastante variável).
    </para>
    <example>
     <title>usando a função manipuladora de template padrão</title>
     <programlisting>
&lt;?php
// ponha esta função em algum lugar de sua aplicação

function make_template ($resource_type, $resource_name, &amp;$template_source, &amp;$template_timestamp, &amp;$smarty_obj)
{
	if( $resource_type == 'file' ) {
		if ( ! is_readable ( $resource_name )) {
			// cria um arquivo de template, retorna o conteúdo.
			$template_source = "This is a new template.";
			$template_timestamp = time();
			$smarty_obj->_write_file($resource_name,$template_source);
			return true;
		}
    } else {
		// não é arquivo
		return false;
    }
}

// defina a manipuladora padrão
$smarty->default_template_handler_func = 'make_template';
?&gt;</programlisting>
    </example>
   </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->