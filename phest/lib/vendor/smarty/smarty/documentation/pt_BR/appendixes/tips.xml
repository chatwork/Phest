<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.3 Maintainer: thomasgm Status: ready -->
<chapter id="tips">
   <title>Dicas &amp; Truques</title>
   <para>
   </para>
   <sect1 id="tips.blank.var.handling">
		<title>Manipulação de Variável Vazia</title>
		<para>
		Há momentos que você quer mostrar um valor padrão para uma variável vazia ao invés de não mostrar nada, 
		tal como mostrar "&amp;nbsp;" para que os planos de fundo de tabelas funcionem corretamente. Muitos 
		usariam uma instrução {if} para fazer isso, mas há um macete que pode ser feito usando-se o 
		modificador de variável <emphasis>padrão</emphasis> do Smarty.
		</para>
<example>
<title>Imprimindo &amp;nbsp; quando uma variável está vazia</title>
<programlisting>
<![CDATA[
{* A forma mais longa *}

{if $titulo eq ""}
	&amp;nbsp;
{else}
	{$titulo}
{/if}


{* A forma mais simples *}

{$titulo|default:"&amp;nbsp;"}
]]>
</programlisting>
</example>
	</sect1>

    <sect1 id="tips.default.var.handling">
		<title>Manipulação do valor padrão de uma Variável</title>
		<para>
        Se uma variável é usada freqüentemente em seus templates, aplicar o modificador de variável 
		<emphasis>padrão</emphasis> toda vez pode se tornar algo muito desagradável. Você pode evitar 
		isto atribuindo um valor padrão para a variável usando a função <link linkend="language.function.assign">assign</link>.
		</para>
<example>
<title>Atribuindo o valor padrão para uma variável de template</title>
<programlisting>
<![CDATA[
{* coloque isto em algum lugar no topo de seu template *}
{assign var="titulo" value=$titulo|default:"sem título"}

{* Se o $titulo estava vazio, ele agora contém o valor "sem titulo" quando você exibí-lo *}
{$titulo}
]]>
</programlisting>
</example>
	</sect1>
    <sect1 id="tips.passing.vars">
		<title>Passando a variável titulo para o template de cabeçalho</title>
		<para>
        Quando a maioria de seus templates usam os mesmos cabeçalhos e mesmos rodapés, é
		comum dividi-los um em cada template e então incluí-los. Mas o que fazer se o 
		cabeçalho precisa ter um titulo diferente, dependendo de que página ele está vindo? 
		Você pode passar o titulo para o 
		cabeçalho quando ele é incluído.
		</para>
<example>
<title>Passando a variável titulo para o template de cabeçalho</title>
<programlisting>
<![CDATA[
paginaprincipal.tpl
------------

{include file="cabecalho.tpl" titulo="Página Principal"}
{* O conteúdo do template vem aqui *}
{include file="rodape.tpl"}


arquivos.tpl
------------

{config_load file="pagina_arquivos.conf"}
{include file="cabecalho.tpl" titulo=#tituloPaginaArquivos#}
{* O conteúdo do template vem aqui *}
{include file="rodape.tpl"}


cabecalho.tpl
----------
<HTML>
<HEAD>
<TITLE>{$title|default:"BC News"}</TITLE>
</HEAD>
<BODY>


footer.tpl
----------
</BODY>
</HTML>
]]>
</programlisting>
</example>
	<para>        
       Quando a página for extraída, o título da "Página Principal" é passado ao template 'cabecalho.tpl', 
	   e será imediatamente usado como título da página. Quando a página de arquivos é extraída, o título 
	   muda para "Arquivos". No que no exemplo de arquivos, nós estamos usando uma variável que vem do 
	   arquivo 'pagina_arquivos.conf' ao invés de uma variável definida no código. Note também que "BC News" 
	   é mostrado somente se a variável $titulo não conter valor algum, isto é feito usando-se o modificador 
	   de variáveis <emphasis>padrão</emphasis>.
	</para>
	</sect1>
    <sect1 id="tips.dates">
       <title>Datas</title>
       <para>
       Em geral, sempre envie datas ao Smarty no formato timestamp. Deste modo o desginer do template 
	   pode usar o modificador <link linkend="language.modifier.date.format">date_format</link> 
	   para ter um controle total sobre a formatação da data, e também facilita a comparação de datas 
	   se necessário.
       </para>
       <para>
	   Nota: No Smarty 1.4.0, você pode enviar datas ao Smarty no formato unix timestamp, 
	   mysql timestamp, ou qualer outra data que possa ser lida pela função strtotime().
       </para>
   <example>
    <title>usando date_format</title>
    <programlisting>
<![CDATA[
{$startDate|date_format}
]]>
    </programlisting>
    <para>
     Irá mostrar:
    </para>
    <screen>
<![CDATA[
Jan 4, 2001
]]>
    </screen>
    <programlisting>
<![CDATA[
{$startDate|date_format:"%Y/%m/%d"}
]]>
    </programlisting>
    <para>
     Irá mostrar:
    </para>
    <screen>
<![CDATA[
2001/01/04
]]>
    </screen>
    <programlisting>
<![CDATA[
{if $data1 < $data2}
   ...
{/if}
]]>
    </programlisting>
   </example>
		<para>
         Quando se está usando {html_select_date} em um template, o programador normalmente vai querer 
		 converter a saída de um formulário de volta para o formato timestamp. Abaixo está uma função 
		 que irá ajudá-lo à fazer isto.
		</para>
<example>
<title>Convertendo datas de volta ao formato timestamp</title>
<programlisting role="php">
<![CDATA[
<?php
// presume-se que os elementos de seu formulário são chamados de 
// startDate_Day, startDate_Month, startDate_Year

$startDate = makeTimeStamp($startDate_Year,$startDate_Month,$startDate_Day);

function makeTimeStamp($year="",$month="",$day="")
{
	if(empty($year))
		$year = strftime("%Y");
	if(empty($month))
		$month = strftime("%m");
	if(empty($day))
		$day = strftime("%d");

	return mktime(0,0,0,$month,$day,$year);
}
?>
]]>
</programlisting>
</example>
	</sect1>
    <sect1 id="tips.wap">
		<title>WAP/WML</title>
		<para>
        Os templates WAP/WML exigem um cabeçalho com o tipo de conteúdo (Content-Type) PHP para serem 
		passados junto com o template. O modo mais fácil de se fazer isso seria escrever uma função 
		personalizada que envia-se este cabeçalho. Se você está usando cache, isto não irá funcionar, 
		então nós faremos isso usando a tag insert (lembre-se que tags de insert não são guardadas no cache!). 
		Certifique-se de que nada é enviado ao navegador antes do template, caso contrário o cabeçalho não irá 
		funcionar.
		</para>
<example>
<title>Usando insert para escrever um cabeçalho WML Content-Type</title>
<programlisting role="php">
<![CDATA[
<?php
// certifique-se que o apache está configurado para reconhecer extensões .wml!
// coloque esta função em algum lugar de seu aplicativo, ou no arquivo Smarty.addons.php

function insert_header($params) 
{
   // esta função espera o argumento $content
   if (empty($params['content'])) {
       return;
   }
   header($params['content']);
   return;
}
?>
]]>
</programlisting>
<para>
seu template do Smarty deve começar com a tag insert, veja o exemplo à seguir:
</para>
<programlisting>
<![CDATA[
{insert name=header content="Content-Type: text/vnd.wap.wml"}

<?xml version="1.0"?>  
<!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wapforum.org/DTD/wml_1.1.xml"> 

<!-- begin new wml deck --> 
<wml> 
<!-- begin first card --> 
<card> 
<do type="accept"> 
<go href="#two"/> 
</do>  
<p> 
Bem-vindo ao WAP com Smarty!
Pressione OK para continuar...
</p> 
</card>  
<!-- begin second card --> 
<card id="two">  
<p> 
Bem fácil isso, não é?
</p> 
</card> 
</wml>
]]>
</programlisting>
</example>
	</sect1>
	<sect1 id="tips.componentized.templates">
		<title>Templates componentizados</title>
		<para>
         Tradicionalmente, programar templates para suas aplicações é feito da seguinte maneira: 
		 Primeiro, você guardar suas variáveis junto com a aplicação PHP, (talvez obtendo-as de consultas 
		 à banco de dados). Após, você instancia seu objeto Smarty, atribui valores às variáveis e 
		 mostra o template. Digamos que nós temos um registrador de estoque em nosso template. Nós 
		 coletaríamos os dados do estoque em nossa aplicação, e então atribuíriamos valores as variáveis 
		 referentes à ele no template e depois exibiríamos o template na tela. Agora não seria legal 
		 se você pudesse adicionar este registrador de esto em qualquer aplicação simplesmente incluindo 
		 um template nela, e sem se preocupar com a busca dos dados futuramente?
		</para>
        <para>
		Você pode fazer isto escrevendo um plugin personalizado que obteria o 
		conteúdo e atribuiria ele à uma variável definida no template.
        </para>
<example>
<title>Template componentizado</title>
    <programlisting role="php">
<![CDATA[
<?php

// coloque o arquivo "function.load_ticker.php" no diretório plugin

// configura nossa função para pegar os dados do estoque
function fetch_ticker($symbol) 
{
   // coloque a lógica que obtém os dados de 
   // algum recurso e guarde na variável $ticker_info
   return $ticker_info;
}

function smarty_function_load_ticker($params, &$smarty) 
{
   // chama a função
   $ticker_info = fetch_ticker($params['symbol']);
   
   // atribuite o valor à uma variável no template
   $smarty->assign($params['assign'], $ticker_info);
}
?>
]]>
    </programlisting>
    <programlisting>
<![CDATA[
index.tpl
---------

{* Smarty *}

{load_ticker symbol="YHOO" assign="ticker"}

Nome no estoque: {$ticker.name} Preço no estoque: {$ticker.price}
]]>
    </programlisting>
</example>
	</sect1>
	<sect1 id="tips.obfuscating.email">
		<title>Ofuscando endereços de E-mail</title>
		<para>
         Você já se espantou como seu endereço de E-mail entra em tantas listas de spam? 
		 A única forma dos spammers coletarem seu(s) endereço(s) de E-mail(s) é de páginas web. 
		 Para ajudar à combater este problema, você pode fazer seu endereço de E-mail aparecer em javascript 
		 misturado em código HTML, e ainda assim ele irá aparecer e funcionar corretamente no navegador. 
		 Isto é feito com o plugin chamado 'mailto'.
		</para>
<example>
<title>Exemplo de ofuscamento de um Endereço de E-mail</title>
<programlisting>
<![CDATA[
index.tpl
---------

envia informações para
{mailto address=$EmailAddress encode="javascript" subject="Olá"}

]]>
</programlisting>
</example>
	<note>
	<title>Nota técnica</title>
	<para>
	Este método não é 100% a prova de falha. Um spammer poderia criar um programa
	para coletar o e-mail e decodificar estes valores, mas é muito pouco provável.
	</para>
	</note>
	</sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->