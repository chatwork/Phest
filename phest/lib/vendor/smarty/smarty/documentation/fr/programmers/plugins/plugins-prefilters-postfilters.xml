<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.3 Maintainer: yannick Status: ready -->

<sect1 id="plugins.prefilters.postfilters">
 <title>filtres de pré-compilation/filtres de post-compilation</title>
 <para>
  Les filtres de pré-compilation et les filtres de post-compilation ont des concepts très
  proches. Ils différent dans leur exécution, plus précisément dans le
  moment où ils sont exécutés.
 </para>
 <funcsynopsis>
  <funcprototype>
   <funcdef>string <function>smarty_prefilter_<replaceable>name</replaceable></function></funcdef>
   <paramdef>string <parameter>$source</parameter></paramdef>
   <paramdef>object <parameter>&amp;$smarty</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
 <para>
  Les filtres de pré-compilation sont utilisés pour transformer la source d'un template
  juste avant la compilation. Le premier paramètre passé à la fonction
  de filtre de pré-compilation est la source du template, éventuellement modifiée par
  d'autres filtres de pré-compilations. Le plugin est supposé retourner la source modifiée.
  Notez que cette source n'est sauvegardée nulle part, elle est seulement
  utilisé pour la compilation.
 </para>
 <funcsynopsis>
  <funcprototype>
   <funcdef>string <function>smarty_postfilter_<replaceable>name</replaceable></function></funcdef>
   <paramdef>string <parameter>$compiled</parameter></paramdef>
   <paramdef>object <parameter>&amp;$smarty</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
 <para>
  Les filtres de post-compilation sont utilisés pour modifier la sortie du template
  (le code PHP) juste après que la compilation a été faîte mais juste
  avant que le template ne soit sauvegardé sur le système de fichiers.
  Le premier paramètre passé à la fonction de filtre de post-compilation est le code
  du template compilé, éventuellement déja modifié par d'autres filtres de post-compilations.
  Le plugin est censé retourner la version modifiée du code.
 </para>
 <example>
  <title>Plugin de filtre de post-compilation</title>
  <programlisting role="php">
<![CDATA[
<?php
/*
 * Smarty plugin
 * -------------------------------------------------------------
 * Fichier :  prefilter.pre01.php
 * Type :     filtre de pré-compilation
 * Nom :      pre01
 * Rôle :     Passe les balises HTML en minuscules.
 * -------------------------------------------------------------
 */
 function smarty_prefilter_pre01($source, &$smarty)
 {
     return preg_replace('!<(\w+)[^>]+>!e', 'strtolower("$1")', $source);
 }
?>
]]>
  </programlisting>
 </example>
 <para></para>
 <example>
  <title>Plugin de filtre de post-compilation</title>
  <programlisting role="php">
<![CDATA[
/*
 * Smarty plugin
 * -------------------------------------------------------------
 * Fichier :  postfilter.post01.php
 * Type:      filtre de post-compilation
 * Nom :      post01
 * Rôle :     Renvoie du code qui liste toutes les variables
 *            du template.
 * -------------------------------------------------------------
 */
 function smarty_postfilter_post01($compiled, &$smarty)
 {
     $compiled = "<pre>\n<?php print_r(\$this->get_template_vars()); ?>\n</pre>" . $compiled;
     return $compiled;
 }
?>
]]>
  </programlisting>
 </example>
 <para>
  Voir aussi
  <link linkend="api.register.prefilter">
  <varname>register_prefilter()</varname></link>,
  <link linkend="api.unregister.prefilter">
  <varname>unregister_prefilter()</varname></link>
  <link linkend="api.register.postfilter">
  <varname>register_postfilter()</varname></link> et
  <link linkend="api.unregister.postfilter">
  <varname>unregister_postfilter()</varname></link>.
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
