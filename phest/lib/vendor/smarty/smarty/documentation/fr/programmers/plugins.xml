<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
<chapter id="plugins">
 <title>Etendre Smarty avec des plugins</title>
 <para>
  La version 2.0 a introduit l'architecture de plugin qui est
  utilisée pour pratiquement toutes les fonctionnalités
  personnalisables de Smarty. Ceci comprend :
  <itemizedlist spacing="compact">
   <listitem><simpara>les fonctions</simpara></listitem>
   <listitem><simpara>les modificateurs</simpara></listitem>
   <listitem><simpara>les fonctions de blocs</simpara></listitem>
   <listitem><simpara>les fonctions de compilation</simpara></listitem>
   <listitem><simpara>les filtres de pré-compilation</simpara></listitem>
   <listitem><simpara>les filtres de post-compilation</simpara></listitem>
   <listitem><simpara>les filtres de sorties</simpara></listitem>
   <listitem><simpara>les ressources</simpara></listitem>
   <listitem><simpara>les insertions</simpara></listitem>
  </itemizedlist>
  A part pour les ressources, la compatibilité avec les anciennes
  façons d'enregistrer les fonctions de gestion avec l'API register_
  est conservée. Si vous n'avez pas utilisé cette API et que vous avez
  à la place directement modifié les variables de classes
  <literal>$custom_funcs</literal>, <literal>$custom_mods</literal> et
  d'autres, vous devez alors modifier vos scripts pour utiliser
  l'API ou convertir vos fonctionnalités personnalisées en plugins.
 </para>
 
 &programmers.plugins.plugins-howto;
 
 &programmers.plugins.plugins-naming-conventions;
 
 &programmers.plugins.plugins-writing;
 
 &programmers.plugins.plugins-functions;
 
 &programmers.plugins.plugins-modifiers;
 
 &programmers.plugins.plugins-block-functions;
 
 &programmers.plugins.plugins-compiler-functions;
 
 &programmers.plugins.plugins-prefilters-postfilters;
 
 &programmers.plugins.plugins-outputfilters;
 
 &programmers.plugins.plugins-resources;
 
 &programmers.plugins.plugins-inserts;
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
