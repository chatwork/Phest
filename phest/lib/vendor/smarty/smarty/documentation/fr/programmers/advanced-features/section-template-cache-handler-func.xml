<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.5 Maintainer: gerald Status: ready -->

<sect1 id="section.template.cache.handler.func">
 <title>Fonction de gestion du cache</title>
 <para>
  Une alternative au mécanisme de cache par défaut (basé sur des fichiers
  de cache) consiste à spécifier une fonction de gestion de cache utilisateur
  qui sera utilisée pour lire, écrire et effacer les fichiers de cache.
 </para>
 <para>
  Il suffit de créer dans votre application une fonction que Smarty
  utilisera pour la gestion du cache et d'assigner le nom de cette
  fonction à la variable de classe
  <link linkend="variable.cache.handler.func">$cache_handler_func</link>.
  Smarty utilisera alors cette fonction pour gérer les données du cache.
 </para>

 <itemizedlist>
 <listitem><para>
   Le premier argument est l'action, qui sera <literal>read</literal>, <literal>write</literal> and
   <literal>clear</literal>.
 </para></listitem>

 <listitem><para>
   Le second paramètre est l'objet Smarty.
 </para></listitem>

 <listitem><para>
   Le troisième est le contenu
   du cache. Pour écrire, Smarty passe le contenu du cache dans ces paramètres.
   Pour lire, Smarty s'attend à ce que votre fonction accepte ce paramètre
   par référence et que vous le remplissiez avec les données du cache. Pour effacer,
   il suffit de passer une variable fictive car cette dernière n'est pas utilisée.
 </para></listitem>

 <listitem><para>
   Le quatrième paramètre est le nom du fichier de template (utile pour
   lire/écrire).
 </para></listitem>

 <listitem><para>
   Le cinquième paramètre est l'identifiant <parameter>$cache_id</parameter>.
 </para></listitem>

 <listitem><para>
   Le sixième est l'identifiant optionnel <link linkend="variable.compile.id">
 <parameter>$compile_id</parameter></link>.
 </para></listitem>

 <listitem><para>
   Le septième et dernier paramètre <parameter>$exp_time</parameter>
   a été ajouté dans Smarty-2.6.0.
</para></listitem>

</itemizedlist>

 <example>
  <title>Exemple d'utilisation de MySQL pour la source du cache</title>
  <programlisting role="php">
<![CDATA[
<?php
/*****

exemple d'usage :

include('Smarty.class.php');
include('mysql_cache_handler.php');

$smarty = new Smarty;
$smarty->cache_handler_func = 'mysql_cache_handler';

$smarty->display('index.tpl');


la base mysql est attendu dans ce format :

create database SMARTY_CACHE;

create table CACHE_PAGES(
CacheID char(32) PRIMARY KEY,
CacheContents MEDIUMTEXT NOT NULL
);

*****/

function mysql_cache_handler($action, &$smarty_obj, &$cache_content, $tpl_file=null, $cache_id=null, $compile_id=null)
{
  // l'hôte de la bd, l'utilisateur, et le mot de passe
  $db_host = 'localhost';
  $db_user = 'myuser';
  $db_pass = 'mypass';
  $db_name = 'SMARTY_CACHE';
  $use_gzip = false;

  // crée un identifiant de cache unique
  $CacheID = md5($tpl_file.$cache_id.$compile_id);

  if(! $link = mysql_pconnect($db_host, $db_user, $db_pass)) {
 $smarty_obj->_trigger_error_msg("cache_handler: could not connect to database");
    return false;
  }
  mysql_select_db($db_name);

  switch ($action) {
    case 'read':
      // récupère le cache dans la base de données
      $results = mysql_query("select CacheContents from CACHE_PAGES where CacheID='$CacheID'");
      if(!$results) {
        $smarty_obj->_trigger_error_msg('cache_handler: query failed.');
      }
      $row = mysql_fetch_array($results,MYSQL_ASSOC);

      if($use_gzip && function_exists('gzuncompress')) {
        $cache_content = gzuncompress($row['CacheContents']);
      } else {
        $cache_content = $row['CacheContents'];
      }
      $return = $results;
      break;
    case 'write':
      // sauvegarde le cache dans la base de données

      if($use_gzip && function_exists("gzcompress")) {
        // compresse le contenu pour gagner de la place
        $contents = gzcompress($cache_content);
      } else {
        $contents = $cache_content;
      }
      $results = mysql_query("replace into CACHE_PAGES values(
                                              '$CacheID',
                                              '".addslashes($contents)."')
                                              ");
      if(!$results) {
        $smarty_obj->_trigger_error_msg('cache_handler: query failed.');
      }
      $return = $results;
      break;
    case 'clear':
      // efface les données du cache
      if(empty($cache_id) && empty($compile_id) && empty($tpl_file)) {
        // les efface toutes
        $results = mysql_query('delete from CACHE_PAGES');
      } else {
        $results = mysql_query("delete from CACHE_PAGES where CacheID='$CacheID'");
      }
      if(!$results) {
        $smarty_obj->_trigger_error_msg('cache_handler: query failed.');
      }
      $return = $results;
      break;
    default:
      // erreur, action inconnue
      $smarty_obj->_trigger_error_msg("cache_handler: unknown action \"$action\"");
      $return = false;
      break;
  }
  mysql_close($link);
  return $return;

}

?>
]]>
  </programlisting>
 </example>
</sect1>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->