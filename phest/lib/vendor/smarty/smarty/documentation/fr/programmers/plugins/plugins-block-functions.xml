<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->

<sect1 id="plugins.block.functions">
 <title>Fonctions de blocs</title>
 <funcsynopsis>
  <funcprototype>
   <funcdef>void <function>smarty_block_<replaceable>name</replaceable></function></funcdef>
   <paramdef>array <parameter>$params</parameter></paramdef>
   <paramdef>mixed <parameter>$content</parameter></paramdef>
   <paramdef>object <parameter>&amp;$smarty</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
 <para>
  Les fonctions de blocs sont des fonctions de la forme <literal>{func} .. {/func}</literal>.
  En d'autres mots, elles englobent des blocs de template et opèrent sur les
  contenus de ces blocs. Les fonctions de blocs ont la priorité sur les
  <link linkend="language.custom.functions">fonctions utilisateurs</link>
  de même nom, ce qui signifie que vous ne
  pouvez avoir une fonction utilisateur <literal>{func}</literal> et une fonction de bloc
  <literal>{func}..{/func}</literal>.
 </para>
 
 <itemizedlist>
  <listitem><para>
    Par défaut, l'implémentation de votre fonction est appelée deux fois par Smarty :
    une fois pour la balise ouvrante et une autre fois pour la balise
    fermante (voir <literal>$repeat</literal> ci-dessous 
    sur la façon de modifier ce comportement).
   </para></listitem>
  <listitem><para>
    Seule la balise ouvrante d'une fonction de bloc peut avoir des
    <link linkend="language.syntax.attributes">attributs</link>.
    Tous les attributs passés par le template aux fonctions de templates sont
    contenus dans le tableau associatif <parameter>$params</parameter>.
    Votre fonction a aussi accès aux attributs de la balise
    ouvrante quand c'est la balise fermante qui est exécutée.
   </para></listitem>
  <listitem><para>
    La valeur de la variable <parameter>$content</parameter> est différente
    selon si votre fonction est appelée pour la balise ouvrante ou la
    balise fermante. Si c'est pour la balise ouvrante, elle sera à &null; et si c'est la balise fermante,
    elle sera égale au contenu du bloc de template. Notez que le bloc de template
    aura déjà été exécuté par Smarty, vous recevrez donc la sortie du
    template et non sa source.
   </para></listitem>
  
  <listitem><para>
    Le paramètre <parameter>$repeat</parameter> est passé
    par référence à la fonction d'implémentation et fournit la possibilité
    de contrôler le nombre d'affichage du bloc. Par défaut,
    <parameter>$repeat</parameter> vaut
    &true; lors du premier appel à la fonction de bloc (le bloc d'ouverture du tag) et
    &false; lors de tous les autres appels à la fonction
    de bloc (le bloc de fermeture du tag). Chaque fois que la fonction
    d'implémentation retourne avec le paramètre
    <parameter>$repeat</parameter> vallant &true;, le contenu situé
    <literal>{func}...{/func}</literal> est évalué et la fonction d'implémentation est appelé
    une nouvelle fois avec le nouveau bloc de contenu en tant que paramètre
    <parameter>$content</parameter>.
   </para></listitem>
 </itemizedlist>
 
 <para>
  Si vous imbriqué des fonctions de bloc, il est possible de connaître
  la fonction de bloc parente grâce à la variable <literal>$smarty->_tag_stack</literal>.
  Faîtes un <ulink url="&url.php-manual;var_dump"><varname>var_dump()</varname></ulink>
  dessus et la structure devrait apparaître.
 </para>
 <example>
  <title>Fonction de bloc</title>
  <programlisting role="php">
   <![CDATA[
<?php
/*
* Smarty plugin
* -------------------------------------------------------------
* Fichier :  block.translate.php
* Type :     bloc
* Nom :      translate
* Rôle :     traduire un bloc de texte
* -------------------------------------------------------------
*/
function smarty_block_translate($params, $content, &$smarty, &$repeat)
{
   // n'affiche que lors de la balise fermante
   if(!$repeat){
      if (isset($content)) {
         $lang = $params['lang'];
         // effectuer une bonne traduction ici avec $content
         return $translation;
      }
   }
}
?>
]]>
  </programlisting>
 </example>
 <para>
  Voir aussi :
  <link linkend="api.register.block"><varname>register_block()</varname></link> et
  <link linkend="api.unregister.block"><varname>unregister_block()</varname></link>.
 </para>
</sect1>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
