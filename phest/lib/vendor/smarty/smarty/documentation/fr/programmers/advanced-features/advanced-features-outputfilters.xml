<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->

<sect1 id="advanced.features.outputfilters">
 <title>Filtres de sortie</title>
 <para>
  Quand le template est appelé via les fonctions
  <link linkend="api.display"><varname>display()</varname></link> ou
  <link linkend="api.fetch"><varname>fetch()</varname></link>,
  sa sortie est envoyée à travers un ou plusieurs filtres de sorties.
  Ils diffèrent des <link linkend="advanced.features.postfilters">filtres
   de post-compilation</link> dans le sens où ils agissent sur la sortie
  des templates, une fois exécutés, et non sur les sources des templates.
 </para>

 <para>
  Les filtres de sortie peuvent être soit
  <link linkend="api.register.outputfilter">déclarés</link> soit
  chargés depuis les <link linkend="variable.plugins.dir">répertoires
  des plugins</link> en utilisant la fonction
  <link linkend="api.load.filter"><varname>load_filter()</varname></link>
  ou en réglant la variable
  <link linkend="variable.autoload.filters"><parameter>$autoload_filters</parameter></link>.
  Smarty passera la sortie du template en premier argument et attendra
  de la fonction qu'elle retourne le résultat de l'exécution.
 </para>
 <example>
  <title>Utilisation d'un filtre de sortie</title>
  <programlisting>
<![CDATA[
<?php
// mettez ceci dans votre application
function protect_email($tpl_output, &$smarty)
{
    $tpl_output =
       preg_replace('!(\S+)@([a-zA-Z0-9\.\-]+\.([a-zA-Z]{2,3}|[0-9]{1,3}))!',
                    '$1%40$2', $tpl_output);
    return $tpl_output;
}

// enregistre le filtre de sortie
$smarty->register_outputfilter('protect_email');
$smarty->display('index.tpl');

// dorénavant toute occurence d'un adresse email dans le résultat du template
// aura un protection simple contre les robots spammers
?>
]]>
  </programlisting>
 </example>
 <para>
  Voir aussi
  <link linkend="api.register.outputfilter"><varname>register_outpurfilter()</varname></link>,
  <link linkend="api.load.filter"><varname>load_filter()</varname></link>,
  <link linkend="variable.autoload.filters"><parameter>$autoload_filters</parameter></link>,
  les <link linkend="advanced.features.postfilters">filtres de post-compilation</link> et
  <link linkend="variable.plugins.dir"><parameter>$plugins_dir</parameter></link>.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->