<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.8 Maintainer: yannick Status: ready -->

<sect1 id="advanced.features.objects">
 <title>Objets</title>
 <para>
  Smarty donne l'accès aux <ulink url="&url.php-manual;object">objets</ulink>
  PHP à travers les templates. Il y a 2 moyens d'y avoir accès.
 </para>
 <itemizedlist spacing="compact">
 <listitem><para>
  Le premier consiste à
  <link linkend="api.register.object">allouer les objets</link>
  au template puis de les utiliser avec une syntaxe similaire a celles
  des <link linkend="language.custom.functions">fonctions personnalisées</link>.
 </para></listitem>
 <listitem><para>
  Le deuxième moyen consiste à <link linkend="api.assign">assigner</link> des objets
  aux templates et de les utiliser comme n'importe quelle
  variable.
 </para></listitem>
 </itemizedlist>
 <para>
  La première méthode a une syntaxe beaucoup plus sympathique.
  Elle est aussi plus sécurisée, puisqu'un objet alloué ne peut avoir accès
  qu'a certaines méthodes et propriétés. Néanmoins,
  <emphasis role="bold">un objet alloué ne peut pas avoir de lien sur lui-même 
  ou être mis dans un tableau d'objet</emphasis>, etc.
  Vous devez choisir la méthode qui correspond a vos
  besoins, mais tGchez d'utiliser la première méthode autant que possible
  afin de réduire la syntaxe des templates au minimum.
 </para>
 <para>
  Si l'option de <link linkend="variable.security">sécurité</link>
  est activée, aucune méthode ou fonctions privées
  n'est accessible (commentant par "_"). S'il existe une méthode et une
  propriété du même nom, c'est la méthode qui sera utilisée.
 </para>
 <para>
  Vous pouvez restreindre l'accès aux méthodes et aux propriétés en
  les listant dans un tableau en tant que troisième paramètre
  d'allocation.
 </para>
 <para>
  Par défaut, les paramètres passés aux objets depuis le template le sont de la
  même façon que les <link linkend="language.custom.functions">fonctions utilisateurs</link> 
  les récupèrent.
  Le premier paramètre correspond à un tableau associatif, le second à l'objet
  Smarty. Si vous souhaitez que les paramètres soient passés un à un, comme
  dans un appel traditionnel, définissez registration, quatrième paramètre optionnel,
  à &false;.
 </para>
 <para>
  Le cinquième paramètre optionnel n'a d'effet que si le paramètre
  <parameter>format</parameter> vaut <literal>true</literal> et il contient
  une liste de méthodes qui doivent être traitées comme des blocks. Celà signifie
  que ces méthodes ont un tag fermant dans le template
  (<literal>{foobar->meth2}...{/foobar->meth2}</literal>) et que les paramètres
  de ces méthodes fonctionnent de la même façon que les paramètres des
  <link linkend="plugins.block.functions">blocks de fonctions des plugins</link> :
  Ils contiennent 4 paramètres
  <parameter>$params</parameter>,
  <parameter>$content</parameter>,
  <parameter>&amp;$smarty</parameter> et
  <parameter>&amp;$repeat</parameter> et ils fonctionnent de la même
  façon que les blocks de fonctions des plugins.
 </para>
 <example>
  <title>Utilisation d'un objet alloué ou assigné</title>
  <programlisting role="php">
<![CDATA[
<?php
// la classe

class My_Object() {
  function meth1($params, &$smarty_obj) {
    return 'Ceci est ma methode 1';
  }
}

$myobj = new My_Object;
// enregistre l'objet
$smarty->register_object('foobar',$myobj);
// on restreint l'accès a certaines méthodes et propriétés en les listant
$smarty->register_object('foobar',$myobj,array('meth1','meth2','prop1'));
// pour utiliser le format habituel de paramètre objet, passez le booléen = false
$smarty->register_object('foobar',$myobj,null,false);

// on peut aussi assigner des objets. Assignez par référence quand c'est possible
$smarty->assign_by_ref('myobj', $myobj);

$smarty->display('index.tpl');
?>

?>
]]>
  </programlisting>
  <para>
   Et voici comment accéder à vos objets dans <filename>index.tpl</filename> :
  </para>
  <programlisting>
<![CDATA[
{* accès a notre objet enregistré *}
{foobar->meth1 p1="foo" p2=$bar}

{* on peut aussi assigner la sortie *}
{foobar->meth1 p1="foo" p2=$bar assign="output"}
the output was {$output)

{* access our assigned object *}
{$myobj->meth1("foo",$bar)}
]]>
  </programlisting>
 </example>
 <para>
  Voir aussi
  <link linkend="api.register.object"><varname>register_object()</varname></link> et
  <link linkend="api.assign"><varname>assign()</varname></link>.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->