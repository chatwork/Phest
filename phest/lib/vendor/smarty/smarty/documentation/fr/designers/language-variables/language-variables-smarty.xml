<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.18 Maintainer: yannick Status: ready -->

<sect1 id="language.variables.smarty">
 <title>Variable réservée {$smarty}</title>
 <para>
  La variable PHP réservée <parameter>{$smarty}</parameter> peut être
  utilisée pour accéder à plusieurs
  variables d'environnements. En voici la liste complète.
 </para>

 <sect2 id="language.variables.smarty.request">
  <title>Variables de requête</title>
  <para>
   Les <ulink url="&url.php-manual;reserved.variables">variables de requête</ulink>
   comme <literal>$_GET</literal>, <literal>$_POST</literal>,
   <literal>$_COOKIE</literal>, <literal>$_SERVER</literal>,
   <literal>$_ENV</literal> et <literal>$_SESSION</literal>
   (voir
   <link linkend="variable.request.vars.order"><varname>$request_vars_order</varname></link>
   et
   <link linkend="variable.request.use.auto.globals"><varname>$request_use_auto_globals</varname></link>)
   peuvent être utilisées comme dans l'exemple suivant :
  </para>
  <example>
   <title>Afficher des variables de requête</title>
   <programlisting>
<![CDATA[
{* Affiche la valeur de page dans l'url ($_GET) http://www.example.com/index.php?page=foo *}
{$smarty.get.page}

{* affiche la variable "page" récupérée depuis un formulaire ($_POST['page']) *}
{$smarty.post.page}

{* affiche la valeur du cookie "utilisateur" ($_COOKIE['username']) *}
{$smarty.cookies.utilisateur}

{* affiche la variable serveur "SERVER_NAME" ($_SERVER['SERVER_NAME']) *}
{$smarty.server.SERVER_NAME}

{* affiche la variable d'environnement "PATH" *}
{$smarty.env.PATH}

{* affiche la variable de session PHP "id" ($_SESSION['id']) *}
{$smarty.session.id}

{* affiche la variable "utilisateur" du regroupement de get/post/cookies/server/env *}
{$smarty.request.utilisateur}
]]>
   </programlisting>
  </example>
  <note>
   <para>
    Pour des raisons historiques, <parameter>{$SCRIPT_NAME}</parameter> peut être accédé
    directement, cependant, <parameter>{$smarty.server.SCRIPT_NAME}</parameter> est
    la solution proposée pour accéder à cette valeur.
   </para>
   <programlisting>
<![CDATA[
<a href="{$SCRIPT_NAME}?page=smarty">click me</a>
<a href="{$smarty.server.SCRIPT_NAME}?page=smarty">click me</a>
]]>
   </programlisting>
  </note>
 </sect2>

 <sect2 id="language.variables.smarty.now">
  <title>{$smarty.now}</title>
  <para>
   Le <ulink url="&url.php-manual;function.time">timestamp</ulink>
   courant peut être récupéré grâce à <parameter>{$smarty.now}</parameter>.
   La valeur correspond au nombre de secondes écoulées depuis
   Epoch (1 Janvier 1970) et peut être passé directement au modificateur
   de variable date
   <link linkend="language.modifier.date.format"><varname>date_format</varname></link> 
   à des fins d'affichage. Notez que
   <ulink url="&url.php-manual;function.time"><varname>time()</varname></ulink>
   est appelé à chaque invocation, i.e.
   un script qui prend 3 secondes à s'exécuter avec <parameter>$smarty.now</parameter>
   au début et à la fin montrera les 3 secondes de différence.
  <example>
   <title>Utilisation de {$smarty.now}</title>
   <programlisting>
<![CDATA[
{* utilise le modificateur de variable date_format pour afficher la date et heure *}
{$smarty.now|date_format:'%d-%m-%Y %H:%M:%S'}
]]>
   </programlisting>
  </example>
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.const">
  <title>{$smarty.const}</title>
  <para>
   Vous pouvez directement accéder aux constantes PHP.
   Voir aussi les <link linkend="smarty.constants">constantes smarty</link>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
// la constante définie dans PHP
define('_MY_CONST_VAL','CHERRIES');
]]>
</programlisting>
</informalexample>
<para>Affiche la constante dans un template comme :</para>
<informalexample>
   <programlisting>
<![CDATA[
{* la sortie de la constante PHP dans le template *}
{$smarty.const._MA_CONSTANTE_}
]]>
</programlisting>
</informalexample>
 </sect2>

 <sect2 id="language.variables.smarty.capture">
  <title>{$smarty.capture}</title>
  <para>
   La sortie du template réalisée via
   <link linkend="language.function.capture"><varname>{capture}..{/capture}</varname></link> 
   peut être récupérée par l'intermédiaire de la variable
   <parameter>{$smarty.capture}</parameter>. Voir la section
   sur <link linkend="language.function.capture"><varname>{capture}</varname></link> pour un
   exemple à ce sujet.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.config">
  <title>{$smarty.config}</title>
  <para>
   La variable <parameter>{$smarty.config}</parameter> peut être utilisée pour désigner une
   <link linkend="language.config.variables">variable d'un fichier de configuration</link>.
   <parameter>{$smarty.config.foo}</parameter> est un synonyme de
   <parameter>{#foo#}</parameter>. Voir la section
   <link linkend="language.function.config.load">{config_load}</link>
   pour un exemple à ce sujet.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.loops">
  <title>{$smarty.section}, {$smarty.foreach}</title>
  <para>
   La variable <link linkend="language.function.section"><varname>{section}</varname></link> 
   peut être utilisée pour accéder aux propriétés
   des boucles <parameter>{$smarty.section}</parameter> et
   <parameter>{$smarty.foreach}</parameter>. Voir la documentation de
   <link linkend="language.function.section"><varname>{section}</varname></link> et
   <link linkend="language.function.foreach"><varname>{foreach}</varname></link>.
   Ils ont des valeurs vraiment utiles comme
   <varname>.first</varname>, <varname>.index</varname>, etc.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.template">
  <title>{$smarty.template}</title>
  <para>
   Retourne le nom du template courant. Cet exemple montre le <filename>container.tpl</filename>
   ainsi que le <filename>banner.tpl</filename> inclu avec
   <parameter>{$smarty.template}</parameter>.
  </para>
  <programlisting>
<![CDATA[
<b>Le conteneur principal est {$smarty.template}</b>
{include file='banner.tpl'}
]]>
  </programlisting>
  <para>
   Affichera :
  </para>
  <programlisting>
<![CDATA[
<b>Le conteneur principal est container.tpl</b>
banner.tpl
]]>
  </programlisting>
 </sect2>

 <sect2 id="language.variables.smarty.version">
  <title>{$smarty.version}</title>
  <para>
   Retourne la version de Smarty ayant servie à compiler le template.
  </para>
  <programlisting>
<![CDATA[
<div id="footer">Généré par Smarty {$smarty.version}</div>
]]>
  </programlisting>
 </sect2>

 <sect2 id="language.variables.smarty.ldelim">
  <title>{$smarty.ldelim}, {$smarty.rdelim}</title>
  <para>
   Ces variables sont utilisées pour afficher le délémiteur gauche et le délimiteur droit. Lisez aussi
   la partie <link linkend="language.function.ldelim">
   <varname>{ldelim},{rdelim}</varname></link>.
  </para>
  <para>
   Voir aussi
   les <link linkend="language.syntax.variables">variables</link> et
   les <link linkend="language.config.variables">variables de configuration</link>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->