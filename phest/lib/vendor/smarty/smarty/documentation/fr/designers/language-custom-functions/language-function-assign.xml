<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.9 Maintainer: yannick Status: ready -->

<sect1 id="language.function.assign">
 <title>{assign}</title>
 <para>
  <varname>{assign}</varname> est utilisé pour déclarer des variables de template
  <emphasis role="bold">durant l'exécution du template</emphasis>.
 </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nom attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Defaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>var</entry>
     <entry>chaîne de caractère</entry>
     <entry>Oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la variable assignée</entry>
    </row>
    <row>
     <entry>value</entry>
     <entry>chaîne de caractère</entry>
     <entry>Oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>La valeur assignée</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <example>
  <title>{assign}</title>
  <programlisting>
<![CDATA[
{assign var='name' value='Bob'}

La valeur de $name est {$name}.
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
La valeur de $name est Bob.
]]>
  </screen>
 </example>

 <example>
  <title>{assign} avec quelques fonctions mathématiques</title>
  <para>Cet exemple complexe doit avoir ces variables entre crochets.</para>
  <programlisting>
<![CDATA[
{assign var=running_total value=`$running_total+$some_array[loop].some_value`}
]]>
  </programlisting>
 </example>

 <example>
  <title>Accès aux variables {assign} depuis un script PHP</title>
  <para>
   Pour accéder aux variables <varname>{assign}</varname> depuis le script PHP, utilisez
   <link linkend="api.get.template.vars"><varname>get_template_vars()</varname></link>.
   Ci-dessous, le template qui crée la variable <parameter>$foo</parameter>.
  </para>
  <programlisting>
<![CDATA[
{assign var='foo' value='Smarty'}
]]>
  </programlisting>
  <para>
   Les variables de template ne sont disponibles que après/durant l'exécution du template,
   comme dans le script ci-dessous.
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// ceci n'affichera rien car le template n'a pas encore été exécuté
echo $smarty->get_template_vars('foo');

// Récupère le template dans une variable
$whole_page = $smarty->fetch('index.tpl');

// Ceci affichera 'smarty' car le template a été exécuté
echo $smarty->get_template_vars('foo');

$smarty->assign('foo','Even smarter');

// Ceci affichera 'Even smarter'
echo $smarty->get_template_vars('foo');

?>
]]>
  </programlisting>
 </example>


 <para>
  Les fonctions suivantes peuvent <emphasis>optionnellement</emphasis> assigner
  des variables de template.
 </para>

 <para>
  <link linkend="language.function.capture"><varname>{capture}</varname></link>,
  <link linkend="language.function.include"><varname>{include}</varname></link>,
  <link linkend="language.function.include.php"><varname>{include_php}</varname></link>,
  <link linkend="language.function.insert"><varname>{insert}</varname></link>,
  <link linkend="language.function.counter"><varname>{counter}</varname></link>,
  <link linkend="language.function.cycle"><varname>{cycle}</varname></link>,
  <link linkend="language.function.eval"><varname>{eval}</varname></link>,
  <link linkend="language.function.fetch"><varname>{fetch}</varname></link>,
  <link linkend="language.function.math"><varname>{math}</varname></link> et
  <link linkend="language.function.textformat"><varname>{textformat}</varname></link>.
 </para>
 <para>
  Voir aussi
  <link linkend="api.assign"><varname>assign()</varname></link> et
  <link linkend="api.get.template.vars"><varname>get_template_vars()</varname></link>.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->