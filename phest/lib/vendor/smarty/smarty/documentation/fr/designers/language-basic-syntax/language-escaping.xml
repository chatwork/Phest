<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.8 Maintainer: gerald Status: ready -->

<sect1 id="language.escaping">
 <title>Désactiver l'analyse de Smarty</title>
 <para>
  Il est quelques fois utile, voir nécessaire, de demander à Smarty d'ignorer
  certaines sections que seraient analysées sinon. Un exemple classique est 
  l'incorporation de code Javascript ou CSS dans les templates. Le problème 
  est que ces langages utilisent les caractères { et }, qui sont aussi les 
  <link linkend="language.function.ldelim">délimiteurs</link> Smarty par défaut.
 </para>

 <para>
  Le plus simple pour éviter une telle situation est de placer vos codes 
  Javascript et CSS dans des fichiers séparés, puis d'utiliser les méthodes 
  standards HTML pour y accéder.
 </para>

 <para>
  Inclure du contenu tel quel est possible en utilisant les blocs
  <link linkend="language.function.literal"><varname>{literal} .. {/literal}</varname></link>.
  Similairement à l'utilisation d'entités HTML, vous pouvez utiliser
  <link linkend="language.function.ldelim"><varname>{ldelim}</varname></link> et
  <link linkend="language.function.ldelim"><varname>{rdelim}</varname></link>, ou
  <link linkend="language.variables.smarty.ldelim"><varname>{$smarty.ldelim}</varname></link> 
  pour afficher les délimiteurs.
 </para>

 <para>
  Il est souvent plus simple de modifier les délimiteurs de Smarty :
  <link linkend="variable.left.delimiter"><parameter>$left_delimiter</parameter></link> et
  <link linkend="variable.right.delimiter"><parameter>$right_delimiter</parameter></link>.
  </para>
  <example>
   <title>Exemple de changement de délimiteur</title>
<programlisting role="php">
<![CDATA[
<?php

$smarty->left_delimiter = '<!--{';
$smarty->right_delimiter = '}-->';

$smarty->assign('foo', 'bar');
$smarty->assign('name', 'Albert');
$smarty->display('example.tpl');

?>
]]>
  </programlisting>
  <para>
   Où le template est:
  </para>
  <programlisting>
<![CDATA[
Bienvenue <!--{$name}--> sur Smarty
<script language="javascript">
var foo = <!--{$foo}-->;
function dosomething() {
    alert("foo = " + foo);
}
dosomething();
</script>
]]>
  </programlisting>
 </example>
</sect1>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->