<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.8 Maintainer: gerald Status: ready -->

<chapter id="chapter.debugging.console">
 <title>Console de débogage</title>
 <para>
  Il existe une console de débogage dans Smarty. La console vous indique
  toutes les templates <link linkend="language.function.include">incluses</link>,
  les variables <link linkend="api.assign">assignées</link> et chargées depuis un fichier de
  <link linkend="language.config.variables">configuration</link> pour le template courant.
  Un template appelé <literal>debug.tpl</literal> est inclus dans la distribution de Smarty qui contrôle
  le formattage de la console. Définissez <link linkend="variable.debugging">$debugging</link>
  à &true; dans Smarty et, si besoin, vous pouvez définir
  <link linkend="variable.debug.tpl"><parameter>$debug_tpl</parameter></link>
  de façon à ce que ce dernier contienne le chemin du template à utiliser(dans
  <link linkend="constant.smarty.dir"><constant>SMARTY_DIR</constant></link> par defaut).
  Lorsque vous chargez la page, une console javascript est censée surgir
  et vous donner les noms de toutes les variables inclues et assignées dans
  votre page courante. Pour voir toutes les variables d'un template particulier,
  voir la fonction <link linkend="language.function.debug"><varname>{debug}</varname></link>.
  Pour désactiver la console de débogage, définissez 
  <link linkend="variable.debugging"><parameter>$debugging</parameter></link> à &false;.
  Vous pouvez également temporairement activer le débogage en indiquant
  <literal>SMARTY_DEBUG</literal> dans l'url si tant est que l'option
  <link linkend="variable.debugging.ctrl"><parameter>$debugging_ctrl</parameter></link>
  soit activée.
 </para>
  <note>
   <title>Note technique</title>
   <para>
    La console de débogage ne fonctionne pas si vous utilisez l'API
    <link linkend="api.fetch"><varname>fetch()</varname></link>,
    mais seulement lorsque vous utilisez
    <link linkend="api.display"><varname>display()</varname></link>.
    C'est en effet un jeu d'instructions javascripts à la fin du template qui déclenchent
    l'ouverture de la fenêtre. Si vous n'aimez pas javascript, vous pouvez modifier
    <literal>debug.tpl</literal> pour formater les données de la façon qui vous conviendra le
    mieux. Les données de débogage ne sont pas mises en cache et les
    informations de debug.tpl ne sont pas incluses dans la sortie de la
    console de débogage.
   </para>
  </note>
  <note>
   <para>
    Le temps de chargement des templates et des fichiers de configuration sont
    indiqués en secondes.
   </para>
  </note>
  <para>
   Voir aussi
   <link linkend="troubleshooting">troubleshooting</link>,
   <link linkend="variable.error.reporting"><parameter>$error_reporting</parameter></link>
   et <link linkend="api.trigger.error"><varname>trigger_error()</varname></link>.
   </para>
 </chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->