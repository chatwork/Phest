<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.12 Maintainer: yannick Status: ready -->

<sect1 id="language.function.include.php">
 <title>{include_php}</title>

 <note>
  <title>Notes techniques</title>
  <para>
   <varname>{include_php}</varname> est presque obsolète dans Smarty.
   Vous pouvez obtenir des résultats équivalents en utilisant les fonctions utilisateur.
   La seule raison qui peut vous pousser à utiliser <varname>{include_php}</varname>
   est que vous avez besoin de mettre une de vos fonction en quarantaine vis à vis du 
   répertoire <link linkend="variable.plugins.dir"><filename>plugins/</filename></link>
   ou de votre application. Reportez-vous à l'exemple des
   <link linkend="tips.componentized.templates">templates composants</link>
   pour plus de détails.
  </para>
 </note>

 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nom attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Défaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>file</entry>
     <entry>chaîne de caractère</entry>
     <entry>oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom du fichier PHP à inclure</entry>
    </row>
    <row>
     <entry>once</entry>
     <entry>boléen</entry>
     <entry>Non</entry>
     <entry><emphasis>&true;</emphasis></entry>
     <entry>Inclure plusieurs fois ou non le fichier PHP si
      plusieurs demandes d'inclusions sont faîtes.</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>chaîne de caractère</entry>
     <entry>Non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>le nom de la variable PHP dans laquelle la sortie
      sera assignée plutôt que directement affichée.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <para>
  Les balises <varname>{include_php}</varname> sont utilisées pour inclure directement
  un script PHP dans vos templates. Si
  <link linkend="variable.security"><parameter>$security</parameter></link> est activé,
  alors le script à exécuter doit être placé dans le chemin
  <link linkend="variable.trusted.dir"><parameter>$trusted_dir</parameter></link>. La balise
  <varname>{include_php}</varname> attends l'attribut <parameter>file</parameter>,
  qui contient le chemin du fichier PHP à inclure, relatif à
  <link linkend="variable.trusted.dir"><parameter>$trusted_dir</parameter></link>, ou absolu.
 </para>
 <para>
  Par défaut, les fichiers PHP ne sont inclus qu'une seule fois, même si
  la demande d'inclusion survient plusieurs fois dans le template.
  Vous pouvez demander à ce que ce fichier soit inclus à chaque demande
  grâce à l'attribut <parameter>once</parameter>. Mettre l'attribut once à
  &false; aura pour effet d'inclure le script PHP à chaque fois que demandé
  dans le template.
 </para>
 <para>
  Vous pouvez donner une valeur à l'attribut optionnel
  <parameter>assign</parameter>, pour demander à la fonction
  <varname>{include_php}</varname> d'assigner la sortie du script PHP
  à la variable spécifiée plutôt que d'en afficher directement le résultat.
 </para>
 <para>
  L'objet Smarty est disponible en tant que <parameter>$this</parameter> dans le script PHP inclus.
 </para>
 <example>
  <title>Fonction {include_php}</title>
  <para>Le fichier <filename>load_nav.php</filename></para>
  <programlisting role="php">
<![CDATA[
<?php

// charge des variables depuis une base de données mysql et les assigne au template.
require_once('MySQL.class.php');
$sql = new MySQL;
$sql->query('select * from site_nav_sections order by name',SQL_ALL);
$this->assign('sections',$sql->record);

?>
]]>
  </programlisting>
  <para>
   Où le template est :
  </para>
  <programlisting>
<![CDATA[
{* chemin absolu, ou relatif à $trusted_dir *}
{include_php file='/chemin/vers/load_nav.php'}

{foreach item='nav' from=$navigation}
  <a href="{$nav.url}">{$nav.name}</a><br />
{/foreach}
]]>
  </programlisting>
 </example>

 <para>
  Voir aussi
  <link linkend="language.function.include"><varname>{include}</varname></link>,
  <link linkend="variable.security"><parameter>$security</parameter></link>,
  <link linkend="variable.trusted.dir"><parameter>$trusted_dir</parameter></link>,
  <link linkend="language.function.php"><varname>{php}</varname></link>,
  <link linkend="language.function.capture"><varname>{capture}</varname></link>, les
  <link linkend="template.resources">ressources de template</link> et les
  <link linkend="tips.componentized.templates">composants de templates</link>.
 </para>
</sect1>

 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->