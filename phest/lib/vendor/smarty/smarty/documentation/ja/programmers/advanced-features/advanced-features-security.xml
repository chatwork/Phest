<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4715 $ -->
<!-- EN-Revision: 4525 Maintainer: takagi Status: ready -->
<sect1 id="advanced.features.security">
 <title>セキュリティ</title>
 <para>
   セキュリティ機能は、信頼できないメンバーに ftp 経由などでテンプレートを編集させたりするときに便利です。
   また、テンプレート言語からシステムに関する情報が漏れるリスクを軽減させるためにも使えます。
 </para>
 <para>
   セキュリティポリシーの設定は、Smarty_Security クラスのインスタンスのプロパティで行います。
   次のような設定が可能です。
<itemizedlist>
  <listitem>
    <para>
      <parameter>$php_handling</parameter> は、テンプレートに埋め込まれた PHP のコードを
      Smarty がどのように処理するかを設定します。設定できる値は次のいずれかです。
      <itemizedlist>
        <listitem>
          <para>
          Smarty::PHP_PASSTHRU -> php タグをそのまま表示する
          </para>
        </listitem>
        <listitem>
          <para>
          Smarty::PHP_QUOTE    -> タグをエンティティとしてエスケープする
          </para>
        </listitem>
        <listitem>
          <para>
          Smarty::PHP_REMOVE   -> php タグを削除する
          </para>
        </listitem>
        <listitem>
          <para>
          Smarty::PHP_ALLOW    -> php タグを実行する
          </para>
        </listitem>
      </itemizedlist>
      デフォルトは Smarty::PHP_PASSTHRU です。
    </para>
    <para>
      セキュリティを有効にすると、Smarty オブジェクトの
      <link linkend="variable.php.handling"><parameter>$php_handling</parameter></link>
      の設定内容はチェックしなくなります。
    </para>
  </listitem>
  <listitem>
    <para>
      <parameter>$secure_dir</parameter> は、安全だとみなされるテンプレートディレクトリの配列です。
      <link linkend="variable.template.dir"><parameter>$template_dir</parameter></link>
      は、暗黙のうちに安全だとみなされます。デフォルトは空の配列です。
    </para>
  </listitem>
  <listitem>
    <para>
      <parameter>$trusted_dir</parameter> は、信頼済みとみなされるすべてのディレクトリの配列です。
      信頼済みのディレクトリには、テンプレートから
      <link linkend="language.function.include.php"><varname>{include_php}</varname></link>
      で読み込んで直接実行する PHP スクリプトを置きます。デフォルトは空の配列です。
    </para>
  </listitem>
  <listitem>
      <para>
        <parameter>$trusted_uri</parameter> は、信頼済みとみなされる URI にマッチする正規表現の配列です。
        このセキュリティディレクティブを使うのは、<link linkend="language.function.fetch"><varname>{fetch}</varname></link> と
        <link linkend="language.function.html.image"><varname>{html_image}</varname></link> です。
        これらの関数に渡す URI は <literal>{$PROTOCOL}://{$HOSTNAME}</literal> 形式に切り詰められるので、シンプルな正規表現にできます
        (認証トークンなどのエッジケースは気にしなくてもかまいません)。
      </para>
      <para>
        たとえば <literal>'#https?://.*smarty.net$#i'</literal> は、次の URI へのアクセスを許可します。
        <itemizedlist>
          <listitem><para><literal>http://smarty.net/foo</literal></para></listitem>
          <listitem><para><literal>http://smarty.net/foo</literal></para></listitem>
          <listitem><para><literal>http://www.smarty.net/foo</literal></para></listitem>
          <listitem><para><literal>http://smarty.net/foo</literal></para></listitem>
          <listitem><para><literal>https://foo.bar.www.smarty.net/foo/bla?blubb=1</literal></para></listitem>
        </itemizedlist>

        しかし、これらの URI にはアクセスできません。

        <itemizedlist>
            <listitem><para><literal>http://smarty.com/foo</literal> (トップレベルドメイン "com" がマッチしない)</para></listitem>
            <listitem><para><literal>ftp://www.smarty.net/foo</literal> (プロトコル "ftp" がマッチしない)</para></listitem>
            <listitem><para><literal>http://www.smarty.net.otherdomain.com/foo</literal> (ドメインの最後が "smarty.net" にマッチしない)</para></listitem>
          </itemizedlist>
      </para>
    </listitem>
  <listitem>
    <para>
      <parameter>$static_classes</parameter> は、信頼済みとみなされるクラスの配列です。
      デフォルトは空の配列で、これはすべての static クラスへのアクセスを許可します。
      すべての static クラスへのアクセスを無効にするには
      $static_classes = null とします。
    </para>
  </listitem>
  <listitem>
    <para>
      <parameter>$php_functions</parameter> は、信頼済みとみなされる PHP 関数の配列で、
      テンプレートから使うことができます。すべての PHP 関数を使えないようにするには
      $php_functions = null とします。空の配列を指定 ( $php_functions = array() )
      すると、すべての PHP 関数が使えるようになります。デフォルトは
      array('isset', 'empty', 'count', 'sizeof', 'in_array', 'is_array','time','nl2br') です。
    </para>
  </listitem>
  <listitem>
    <para>
      <parameter>$php_modifiers</parameter> は、信頼済みとみなされる PHP 関数の配列で、
      テンプレートから修飾子として使うことができます。すべての PHP 修飾子を使えないようにするには
      $php_modifier = null とします。空の配列を指定 ( $php_modifier = array() )
      すると、すべての PHP 関数が使えるようになります。デフォルトは
      array('escape','count') です。
    </para>
  </listitem>
  <listitem>
    <para>
      <parameter>$streams</parameter> は、信頼済みとみなされるストリームの配列です。
      これらのストリームをテンプレートから使うことができます。すべてのストリームを使えないようにするには
      $streams = null とします。空の配列を指定 ( $streams = array() )
      すると、すべてのストリームが使えるようになります。デフォルトは
      array('file') です。
    </para>
  </listitem>
  <listitem>
    <para>
     <parameter>$allowed_modifiers</parameter> は (登録済み / autoload された)
     修飾子の配列で、テンプレートから使うことができるものです。配列が空でない場合は、
     ここで指定した修飾子だけが使えるようになります。これはホワイトリストです。
    </para>
   </listitem>
   <listitem>
    <para>
     <parameter>$disabled_modifiers</parameter> は (登録済み / autoload された)
     修飾子の配列で、テンプレートからは使えないものです。
    </para>
   </listitem>
   <listitem>
    <para>
     <parameter>$allowed_tags</parameter> は (登録済み / autoload された)
     関数、ブロックプラグイン、フィルタプラグインの配列で、テンプレートから使うことができるものです。
     配列が空でない場合は、ここで指定した修飾子だけが使えるようになります。これはホワイトリストです。
    </para>
   </listitem>
   <listitem>
    <para>
     <parameter>$disabled_tags</parameter> は (登録済み / autoload された)
     関数、ブロックプラグイン、フィルタプラグインの配列で、テンプレートからは使えないものです。
    </para>
   </listitem>
   <listitem>
    <para>
     <parameter>$allow_constants</parameter> は boolean のフラグで、
     テンプレートから定数にアクセスできるかどうかを指定します。
     デフォルトは "true" です。
    </para>
   </listitem>
  <listitem>
    <para>
      <parameter>$allow_super_globals</parameter> は boolean のフラグで、
      テンプレートから PHP のスーパーグローバル変数にアクセスできるかどうかを指定します。
      デフォルトは "true" です。
    </para>
  </listitem>
  <listitem>
    <para>
      <parameter>$allow_php_tag</parameter> は boolean のフラグで、
      テンプレートから {php} タグや {include_php} タグを使えるかどうかを指定します。
      デフォルトは "false" です。
    </para>
  </listitem>
</itemizedlist>
 </para>
  <para>
    セキュリティを有効にすると、private なメソッドや関数、static クラスやオブジェクトのプロパティへの
    テンプレートからの (先頭に '_' をつけた) アクセスができなくなります。
  </para>
  <para>
    セキュリティポリシーの設定をカスタマイズするには、Smarty_Security
    クラスを継承したクラスを作るかこのクラスのインスタンスを作成します。
 </para>
  <example>
    <title>Smarty_Security クラスの継承によるセキュリティポリシーの設定</title>
    <programlisting role="php">
<![CDATA[
<?php
require 'Smarty.class.php';

class My_Security_Policy extends Smarty_Security {
  // すべての PHP 関数を無効にします
  public $php_functions = null;
  // PHP タグを除去します
  public $php_handling = Smarty::PHP_REMOVE;
  // すべての修飾子を使えるようにします
  public $modifiers = array();
}
$smarty = new Smarty();
// セキュリティを有効にします
$smarty->enableSecurity('My_Security_Policy');
?>
]]>
</programlisting>
  </example>
  <example>
    <title>Smarty_Security クラスのインスタンスによるセキュリティポリシーの設定</title>
    <programlisting role="php">
<![CDATA[
<?php
require 'Smarty.class.php';
$smarty = new Smarty();
$my_security_policy = new Smarty_Security($smarty);
// すべての PHP 関数を無効にします
$my_security_policy->php_functions = null;
// PHP タグを除去します
$my_security_policy->php_handling = Smarty::PHP_REMOVE;
// すべての修飾子を使えるようにします
$my_security_policy->$modifiers = array();
// セキュリティを有効にします
$smarty->enableSecurity($my_security_policy);
?>
]]>
</programlisting>
  </example>
  <example>
    <title>デフォルト設定でのセキュリティの有効化</title>
    <programlisting role="php">
<![CDATA[
<?php
require 'Smarty.class.php';
$smarty = new Smarty();
// デフォルトのセキュリティを有効にします
$smarty->enableSecurity();
?>
]]>
</programlisting>
  </example>
  <note><para>
    セキュリティポリシーの設定をチェックするのは、テンプレートがコンパイルされるときだけです。
    したがって、セキュリティの設定を変更したときには
    キャッシュやコンパイル済みのテンプレートファイルをすべて削除しなければなりません。
  </para></note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
