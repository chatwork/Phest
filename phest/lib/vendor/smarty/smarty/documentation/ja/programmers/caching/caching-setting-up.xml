<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 4741 $ -->
<!-- EN-Revision: 4740 Maintainer: takagi Status: ready -->
<!-- CREDITS: mat-sh,daichi,joe -->
  <sect1 id="caching.setting.up">
   <title>キャッシュのセットアップ</title>
   <para>
    まずはじめにキャッシュを有効にします。これは、<link
    linkend="variable.caching">
    <parameter>$caching</parameter></link> に <literal>Smarty::CACHING_LIFETIME_CURRENT</literal> あるいは <literal>Smarty::CACHING_LIFETIME_SAVED</literal>
    を設定するだけです。
   </para>
   <example>
    <title>キャッシュを有効にする</title>
    <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

// $smarty->cacheLifetime() の値を使って
// キャッシュの有効期限が決まります
$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

$smarty->display('index.tpl');
?>
]]>
    </programlisting>
   </example>
   <para>
    いつものようにテンプレートから出力内容をパースするために
    <literal>display('index.tpl')</literal> を呼び出しますが、
    キャッシュを有効にした事でその出力内容をコピーしたファイルが
    <link linkend="variable.cache.dir"><parameter>$cache_dir</parameter></link>
    内に保存されます。次回 <literal>display('index.tpl')</literal>
    が呼ばれる際には、再びテンプレートをパースする代わりにキャッシュされたコピーが使用されます。
   </para>
   <note>
    <title>テクニカルノート</title>
    <para>
     <link linkend="variable.cache.dir"><parameter>$cache_dir</parameter></link>
     内のファイルにはテンプレート名に類似した名前が付けられます。
     拡張子は <filename>.php</filename> ですが、実際にはPHPスクリプトとして実行されません。
     これらのファイルは編集しないで下さい！
    </para>
   </note>
   <para>
    各々のキャッシュされたページは、
    <link linkend="variable.cache.lifetime"><parameter>$cache_lifetime</parameter></link>
    生存時間が限られています。デフォルト値は 3600 秒、つまり一時間です。
    期限が過ぎた後、キャッシュは再生成されます。
    <link linkend="variable.caching"><parameter>$caching</parameter></link> に <literal>Smarty::CACHING_LIFETIME_SAVED</literal>
    を設定する事によって、個々のキャッシュに自分自身の生存時間を与える事が可能です。詳細は、
    <link linkend="variable.cache.lifetime"><parameter>$cache_lifetime</parameter></link>
    を参照して下さい
   </para>
   <example>
    <title>キャッシュごとに生存時間を設定する</title>
    <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

// 現在のキャッシュの生存時間は display がコールされるごとに残ります
$smarty->setCaching(Smarty::CACHING_LIFETIME_SAVED);

// index.tplに5分のcache_lifetimeをセットします
$smarty->setCacheLifetime(300);
$smarty->display('index.tpl');

// home.tplに1時間のcache_lifetimeをセットします
$smarty->setCacheLifetime(3600);
$smarty->display('home.tpl');

// 注: $caching が Smarty::CACHING_LIFETIME_SAVED のとき、
// 次のような$cache_lifetimeの設定は動作しません。
// home.tplのキャッシュの生存時間は既に1時間にセットされているので、
// もはや、$cache_lifetimeの値が尊重される事はありません。
// home.tplのキャッシュは、今までどおり1時間後に満期になるでしょう。
$smarty->setCacheLifetime(30); // 30 seconds
$smarty->display('home.tpl');
?>
]]>
    </programlisting>
   </example>
   <para>
    <link linkend="variable.compile.check">
    <parameter>$compile_check</parameter></link> が有効 (デフォルト) の時、
    キャッシュファイルに入り組んだすべてのテンプレートファイルと設定ファイルは
    修正されたかどうかをチェックされます。
    もしキャッシュが生成されてからいくつかのファイルが修正されていた場合、
    キャッシュは即座に再生成されます。
    これは最適なパフォーマンスのためには僅かなオーバーヘッドになるので、
    <link linkend="variable.compile.check"><parameter>$compile_check</parameter>
    </link> は &false; にして下さい。
   </para>
   <example>
    <title>$compile_check の無効化</title>
    <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);
$smarty->setCompileCheck(false);

$smarty->display('index.tpl');
?>
]]>
    </programlisting>
   </example>
   <para>
    <link linkend="variable.force.compile">
    <parameter>$force_compile</parameter></link> が有効の場合、
    キャッシュファイルは常に再生成されます。これは事実上、キャッシュ機能を無効にします。
    しかし同時に、パフォーマンスの低下も引き起こします。通常、
    <link linkend="variable.force.compile"><parameter>$force_compile</parameter>
    </link> は <link linkend="chapter.debugging.console">デバッグ</link>
    目的でのみ使用し、キャッシュは
    <link linkend="variable.caching"><parameter>$caching</parameter>
    </link> を Smarty::CACHING_OFF
    にセットして無効にするのがさらに効率の良い方法です。
   </para>
   <para>
    <link linkend="api.is.cached"><varname>isCached()</varname></link>
    関数は、テンプレートが有効なキャッシュを持っているかどうかを調べるのに使われます。
    もしデータベースフェッチを必要とするようなテンプレートのキャッシュが存在する場合、
    フェッチ過程をスキップするためにこの関数を使う事が出来ます。
   </para>
   <example>
    <title>isCached() を使用する</title>
    <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

if(!$smarty->isCached('index.tpl')) {
    // キャッシュが有効でないので、ここで変数の割り当てを行います
    $contents = get_database_contents();
    $smarty->assign($contents);
}

$smarty->display('index.tpl');
?>
]]>
    </programlisting>
   </example>
   <para>
    <link linkend="language.function.nocache"><varname>{nocache}{/nocache}</varname></link>
    ブロック関数、
    <link linkend="language.function.insert"><varname>{insert}</varname></link>
    テンプレート関数、あるいは大半のテンプレート関数に用意されている <literal>nocache</literal>
    パラメータによってページの一部を動的に保つ (キャッシュを無効にする) 事が出来ます。
   </para>
   <para>  
    例えば、すべてのページは右下に表示されるバナー以外はキャッシュが可能だとします。
    バナー部分には
    <link linkend="language.function.insert"><varname>{insert}</varname></link>
    関数を使う事によって、キャッシュされたコンテンツの中に動的な要素を保つ事ができます。
    詳細な説明や例は、<link linkend="language.function.insert"><varname>{insert}</varname></link>
    のドキュメントを参照してください。
   </para>
   <para>
    <link linkend="api.clear.all.cache"><varname>clearAllCache()</varname></link>
    関数または <link linkend="api.clear.cache"><varname>clearCache()</varname></link>
    関数によって、個々のキャッシュファイル (<link linkend="caching.groups">そしてグループ</link>)
    をクリアする事ができます。
   </para>
   <example>
    <title>キャッシュをクリアする</title>
    <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

// 全てのキャッシュファイルをクリアします
$smarty->clearCache('index.tpl');

// index.tplのキャッシュファイルのみクリアします
$smarty->clearAllCache();

$smarty->display('index.tpl');
?>
]]>
    </programlisting>
   </example>

  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
