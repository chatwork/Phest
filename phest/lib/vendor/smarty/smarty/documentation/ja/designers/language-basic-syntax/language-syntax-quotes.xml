<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 4711 $ -->
<!-- EN-Revision: 4020 Maintainer: takagi Status: ready -->
<!-- CREDITS: mat-sh,daichi,joe -->
<sect1 id="language.syntax.quotes">
 <title>ダブルクォート内に埋め込まれた変数</title>

 <itemizedlist>
  <listitem>
 <para>
  Smarty が "ダブルクォート" で囲まれた内容の中から <link
  linkend="api.assign">割り当てられた</link>
  <link   linkend="language.syntax.variables">変数</link>
  として認識するのは、変数名が数字・文字・_（アンダースコア）のみで構成されているものだけです。詳細は
  <ulink url="&url.php-manual;language.variables">名前の付けかた</ulink>
  を参照ください。
  </para></listitem>

  <listitem><para>
  その他の文字、たとえばピリオド（.）や
  <literal>$object>reference</literal>（オブジェクト参照）を含む場合は、
  その変数を <literal>`バッククォート`</literal> で囲む必要があります。
  </para></listitem>

  <listitem><para>
  さらに、Smarty3 ではダブルクォートで囲んだ文字列中に
  Smarty タグを埋め込めるようになりました。
  これは、修飾子つきの変数やプラグイン、PHP の関数の結果などを扱うときに便利です。
  </para></listitem>
 </itemizedlist>

 <example>
  <title>構文の例</title>
  <programlisting>
<![CDATA[
{func var="test $foo test"}              // $foo を参照します
{func var="test $foo_bar test"}          // $foo_bar を参照します
{func var="test `$foo[0]` test"}         // $foo[0] を参照します
{func var="test `$foo[bar]` test"}       // $foo[bar] を参照します
{func var="test $foo.bar test"}          // $foo ($foo.bar ではありません) を参照します
{func var="test `$foo.bar` test"}        // $foo.bar を参照します
{func var="test `$foo.bar` test"|escape} // クォートの外での修飾子
{func var="test {$foo|escape} test"}     // クォートの中での修飾子
{func var="test {time()} test"}          // PHP の関数の結果
{func var="test {counter} test"}         // プラグインの結果
{func var="variable foo is {if !$foo}not {/if} defined"} // Smarty ブロック関数
]]>
  </programlisting>
</example>

 <example>
  <title>実用例</title>
  <programlisting>
<![CDATA[
{* $tpl_name を値で置き換えます *}
{include file="subdir/$tpl_name.tpl"}

{* $tpl_name を置き換えません *}
{include file='subdir/$tpl_name.tpl'} // 変数にはダブルクォートが必要です!

{* "." を含むのでバッククォートで囲む必要があります *}
{cycle values="one,two,`$smarty.config.myval`"}

{* "." を含むのでバッククォートで囲む必要があります *}
{include file="`$module.contact`.tpl"}

{* ドット構文で変数を使うことができます *}
{include file="`$module.$view`.tpl"}
]]>
  </programlisting>
 </example>

 <note><para>
    Smarty では非常に複雑な演算や構文を処理することもできますが、
    テンプレートの構文は必要最小限にして表示内容に注力することをお勧めします。
    もしテンプレートの構文が複雑になりすぎてきたと感じたら、
    表示内容に直接関係のない部分をプラグインや修飾子として
    PHP 側に追い出すとよいでしょう。
 </para></note>

 <para>
  <link linkend="language.modifier.escape"><varname>escape</varname></link>
  も参照ください。
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
