<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 4711 $ -->
<!-- EN-Revision: 4665 Maintainer: takagi Status: ready -->
<!-- CREDITS: mat-sh,daichi,joe -->
<sect1 id="language.function.include">
 <title>{include}</title>
 <para>
  <varname>{include}</varname> タグを使用して、
  現在のテンプレートに他のテンプレートをインクルードします。
  現在のテンプレートにて利用可能なあらゆる変数は、
  インクルードされたテンプレートでも同じく利用可能です。
  </para>

  <itemizedlist>
  <listitem><para>
  <varname>{include}</varname> タグには、テンプレートリソースのパスを含んだ
  <parameter>file</parameter> 属性を必ず指定する必要があります。
  </para></listitem>

 <listitem><para>
  <varname>{include}</varname> の出力をブラウザに表示する代わりに変数に格納したい場合は、
  オプションの <parameter>assign</parameter> 属性にその変数名を定義します。
  <link linkend="language.function.assign"><varname>{assign}</varname></link>
  と同等です。
 </para></listitem>

 <listitem><para>
  インクルードされたテンプレートに変数を渡すには、
  <link linkend="language.syntax.attributes">attributes</link>
  を使用します。インクルードされたテンプレートに明示的に渡された変数は、
  インクルードされたファイルのスコープでのみ有効となります。
  そのテンプレートに同じ名前の変数が存在する場合は、
  渡された変数がそれをオーバーライドします。
 </para></listitem>

  <listitem><para>
  インクルードしたテンプレート側からは、インクルード元のテンプレートにあるすべての変数を使えます。
  しかし、インクルードされたテンプレート内での変数の変更や新たな変数の作成はローカルスコープになり、
  <varname>{include}</varname> ステートメントの後のインクルード元テンプレート側からは見えません。
  このデフォルトの挙動を、インクルードされたテンプレート内で代入されたすべての変数について変更することができます。
  その方法は、<varname>{include}</varname> ステートメントの scope 属性を使うか、
  あるいは <link linkend="language.function.assign"><varname>{assign}</varname></link>
  ステートメントを使うかのいずれかです。
   後者の方法は、インクルードしたテンプレートからインクルード元のテンプレートに
   値を返す場合に便利です。
  </para></listitem>

  <listitem><para>
  <link linkend="variable.template.dir"><parameter>$template_dir</parameter></link>
  ディレクトリ外にあるファイルを <varname>{include}</varname> するには、
  <link linkend="resources">テンプレートリソース</link> を指定します。
  </para></listitem>
 </itemizedlist>

 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>属性名</entry>
     <entry>型</entry>
     <entry>必須</entry>
     <entry>デフォルト</entry>
     <entry>概要</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>file</entry>
     <entry>string</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>インクルードするテンプレートファイル名</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>インクルードしたコンテンツの出力を格納する変数名</entry>
    </row>
    <row>
     <entry>cache_lifetime</entry>
     <entry>integer</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>このサブテンプレートのキャッシュについて独自に設定するキャッシュの有効期限</entry>
    </row>
    <row>
     <entry>compile_id</entry>
     <entry>string/integer</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>このサブ連プレートのコンパイルに使う独自の compile_id</entry>
    </row>
    <row>
     <entry>cache_id</entry>
     <entry>string/integer</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>このサブテンプレートのキャッシュに使う独自の cache_id</entry>
    </row>
    <row>
     <entry>scope</entry>
    <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>サブテンプレート内で代入されたすべての変数のスコープ。'parent'、'root' あるいは 'global'</entry> 
    </row>
    <row>
     <entry>[var ...]</entry>
     <entry>[var type]</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>ローカルからテンプレートに渡す変数</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
 <para><emphasis role="bold">オプションのフラグ</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="2">
   <colspec colname="param" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>名前</entry>
     <entry>概要</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>nocache</entry>
     <entry>このサブテンプレートのキャッシュを無効にする</entry>
    </row>
    <row>
     <entry>caching</entry>
     <entry>このサブテンプレートのキャッシュを有効にする</entry>
    </row>
    <row>
     <entry>inline</entry>
     <entry>サブテンプレートをコンパイルしたコードを呼び出し元テンプレートのコンパイル済みコードとマージする</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
 <example>
  <title>シンプルな {include} の例</title>
  <programlisting>
<![CDATA[
<html>
<head>
  <title>{$title}</title>
</head>
<body>
{include file='page_header.tpl'}

{* ここにテンプレートの本体を記述します。変数 $tpl_name
   はたとえば 'contact.tpl' などに置き換えられます。
*}
{include file="$tpl_name.tpl"}

{* file 属性の短縮形 *}
{include 'page_footer.tpl'}
</body>
</html>
]]>
  </programlisting>
 </example>

 <example>
  <title>{include} に変数を渡す</title>
  <programlisting>
<![CDATA[
{include 'links.tpl' title='Newest links' links=$link_array}
{* ここにテンプレートの本体を記述します *}
{include 'footer.tpl' foo='bar'}
]]>
  </programlisting>
  <para>このテンプレートは、以下のような <filename>links.tpl</filename> をインクルードします。</para>
<programlisting>
<![CDATA[
<div id="box">
<h3>{$title}{/h3>
<ul>
{foreach from=$links item=l}
.. 何かを行います  ...
</foreach}
</ul>
</div>
]]>
</programlisting>
 </example>
 
 <example>
  <title>{include} での parent スコープの使用</title>
  <para>インクルードされたテンプレート内で代入した変数は、インクルードした側のテンプレートからも見えます。</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' scope=parent}
...
{* sub_template で代入した変数を表示します *}
{$foo}<br>
{$bar}<br>
...
]]>
  </programlisting>
  <para>上のテンプレートでインクルードしている <filename>sub_template.tpl</filename> は、次のようになります。</para>
  <programlisting>
<![CDATA[
...
{assign var=foo value='something'}
{assign var=bar value='value'}
...
]]>
</programlisting>
 </example>
 
 <example>
  <title>キャッシュを無効にした {include}</title>
  <para>インクルードされたテンプレートはキャッシュされません。</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' nocache}
...
]]>
  </programlisting>
 </example>
 
 <example>
  <title>個別のキャッシュ有効期限を設定した {include}</title>
  <para>この例では、インクルードされたテンプレートのキャッシュ有効期限を独自に 500 秒に設定します。</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' cache_lifetime=500}
...
]]>
  </programlisting>
 </example>
 
 <example>
  <title>強制的にキャッシュする {include}</title>
  <para>この例では、グローバルなキャッシュ設定にかかわらず、インクルードされたテンプレートはキャッシュされます。</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' caching}
...
]]>
  </programlisting>
 </example>
 
 
  <example>
   <title>{include} と変数への割り当て</title>
   <para>この例は、<filename>nav.tpl</filename>
    の内容を変数 <varname>$navbar</varname> に割り当て、
    ページの最初と最後に出力させるものです。
   </para>
   <programlisting>
 <![CDATA[
<body>
  {include 'nav.tpl' assign=navbar}
  {include 'header.tpl' title='Smarty is cool'}
    {$navbar}
    {* テンプレートの本体をここへ記述します *}
    {$navbar}
  {include 'footer.tpl'}
</body>
]]>
   </programlisting>
 </example>

 <example>
  <title>さまざまな {include} リソースの例</title>
  <programlisting>
<![CDATA[
{* ファイルの絶対パス *}
{include file='/usr/local/include/templates/header.tpl'}

{* ファイルの絶対パス(結果は上と同じ) *}
{include file='file:/usr/local/include/templates/header.tpl'}

{* Windows環境のファイルの絶対パス(接頭辞の"file:"は必須) *}
{include file='file:C:/www/pub/templates/header.tpl'}

{* "db"と名付けられたテンプレートリソースからインクルード *}
{include file='db:header.tpl'}

{* 変数名に格納された名前のテンプレートをインクルード - 例 $module = 'contacts' *}
{include file="$module.tpl"}

{* この例は、シングルクォートでは変数が展開されないため、動作しません *}
{include file='$module.tpl'}

{* 複数の可変テンプレートをインクルード - 例 amber/links.view.tpl *}
{include file="$style_dir/$module.$view.tpl"}
]]>
  </programlisting>
 </example>
 <para>
  <link linkend="language.function.include.php"><varname>{include_php}</varname></link>、
  <link linkend="language.function.insert"><varname>{insert}</varname></link>、
  <link linkend="language.function.php"><varname>{php}</varname></link>、
  <link linkend="resources">テンプレートリソース</link> および
  <link linkend="tips.componentized.templates">コンポーネント化したテンプレート</link>
  も参照してください。
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

