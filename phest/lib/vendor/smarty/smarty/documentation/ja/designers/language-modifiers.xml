<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 4707 $ -->
<!-- EN-Revision: 4362 Maintainer: takagi Status: ready -->
<!-- CREDITS: mat-sh,daichi,joe -->
<chapter id="language.modifiers">
 <title>変数の修飾子</title>
 <para>
  変数の修飾子は、
  <link linkend="language.syntax.variables">変数</link> や
  <link linkend="language.custom.functions">カスタム関数</link>
  や文字列を修飾して出力することができます。修飾子を適用するには、
  変数名の後に <literal>|</literal> (パイプ) と修飾子の名前を指定します。
  また、修飾子はその動作に影響を及ぼす追加のパラメータを受け入れる場合もあります。
  そのパラメータは修飾子の後に続き、<literal>:</literal> (コロン) によって区切られます。
  また、<emphasis>すべての PHP 関数は、暗黙的に修飾子として使用でき</emphasis>
  (あとで説明します)、修飾子は <link linkend="language.combining.modifiers">組み合わせる</link>
  こともできます。
 </para>
 <example>
  <title>修飾子の例</title>
  <programlisting>
<![CDATA[
{* 変数に修飾子を適用 *}
{$title|upper}

{* パラメータを持つ修飾子 *}
{$title|truncate:40:"..."}

{* 関数のパラメータに修飾子を適用 *}
{html_table loop=$myvar|upper}

{* パラメータ付き *}
{html_table loop=$myvar|truncate:40:"..."}

{* リテラル文字列に修飾子を適用 *}
{"foobar"|upper}

{* 現在の日付を整形するために date_format を使用 *}
{$smarty.now|date_format:"%Y/%m/%d"}

{* カスタム関数に修飾子を適用 *}
{mailto|upper address="smarty@example.com"}

{* php の str_repeat を使用 *}
{"="|str_repeat:80}

{* php の count *}
{$myArray|@count}

(* 配列全体の大文字変換と切り詰め *}
<select name="name_id">
{html_options output=$my_array|upper|truncate:20}
</select>
]]>
  </programlisting>
 </example>
 <itemizedlist>

 <listitem><para>
  修飾子は、配列やオブジェクトを含む任意の型の変数に適用することができます。
  
    <note><para>Smarty 3 ではデフォルトの挙動が変わりました。Smarty 2.x の場合は
    配列に修飾子を適用するときには "<literal>@</literal>" を使って
    <literal>{$articleTitle|@count}</literal> のようにする必要がありましたが、
    Smarty 3 では "<literal>@</literal>" は不要になり、無視されます。
    </para>
    <para>
      配列の個々の要素に対して修飾子を適用したい場合は、
      テンプレート内で配列をループさせるか
      修飾子関数の中にその機能を組み込まなければなりません。
    </para></note>
    <note>
      <para>
        また、Smarty 2.x では、<literal>{8+2}</literal> のような数式の場合は
        その演算結果に対して修飾子が適用されていました。つまり、たとえば
        <literal>{8+2|count_characters}</literal> の結果は
        <literal>2</literal> になっていたということです。8+2=10 であり、10 は二文字だからです。
        Smarty 3 では、修飾子を変数やアトミックな式に適用してから計算を行います。
        つまり、2 は一文字なので <literal>{8+2|count_characters}</literal> の結果は 9 になるということです。
        古いバージョンと同じ挙動にするには、括弧を使って <literal>{(8+2)|count_characters}</literal>
        とします。
      </para>
    </note>
  </para>
 </listitem>

 <listitem><para>
  修飾子は <link
  linkend="variable.plugins.dir"><parameter>$plugins_dir</parameter></link>
  から自動的に読み込むか、明示的に <link
  linkend="api.register.plugin"><varname>registerPlugin()</varname></link>
  関数で登録します。２つ目の方法は、PHP スクリプトと Smarty テンプレートで
  関数を共有する場合などに有用です。
  </para></listitem>

  <listitem><para>
  先ほどの例で示したように、全ての PHP 関数は暗黙で修飾子として使用する事ができます。
  しかし、修飾子としてPHP関数を使うには２つの小さな落とし穴があります。
   <itemizedlist>
  <listitem><para>第１に、 たまに関数のパラメータの順序が望ましいものではなくります。
   <literal>$foo</literal> を
   <literal>{"%2.f"|sprintf:$foo}</literal> でフォーマットすることはできますが、
   Smarty が提供する方式である <literal>{$foo|string_format:"%2.f"}</literal>
   のほうがより直感的です。
  </para></listitem>
   <listitem><para>
   第２に、セキュリティが有効な場合、
   修飾子として使用される全ての PHP 関数は
   セキュリティポリシーの <parameter>$modifiers</parameter>
   プロパティで信頼できるものとして定義される必要があります。
   詳細は <link linkend="advanced.features.security">セキュリティ</link>
   の節を参照ください。
  </para></listitem>
   </itemizedlist>
 </para></listitem>
  </itemizedlist>

 <para>
  <link linkend="api.register.plugin"><varname>registerPlugin()</varname></link>、
  <link linkend="language.combining.modifiers">修飾子の連結</link>
  および
  <link linkend="plugins">プラグインによる Smarty の拡張</link>
  も参照ください。
 </para>

 &designers.language-modifiers.language-modifier-capitalize;
 &designers.language-modifiers.language-modifier-cat;
 &designers.language-modifiers.language-modifier-count-characters;
 &designers.language-modifiers.language-modifier-count-paragraphs;
 &designers.language-modifiers.language-modifier-count-sentences;
 &designers.language-modifiers.language-modifier-count-words;
 &designers.language-modifiers.language-modifier-date-format;
 &designers.language-modifiers.language-modifier-default;
 &designers.language-modifiers.language-modifier-escape;
 &designers.language-modifiers.language-modifier-from-charset;
 &designers.language-modifiers.language-modifier-indent;
 &designers.language-modifiers.language-modifier-lower;
 &designers.language-modifiers.language-modifier-nl2br;
 &designers.language-modifiers.language-modifier-regex-replace;
 &designers.language-modifiers.language-modifier-replace;
 &designers.language-modifiers.language-modifier-spacify;
 &designers.language-modifiers.language-modifier-string-format;
 &designers.language-modifiers.language-modifier-strip;
 &designers.language-modifiers.language-modifier-strip-tags;
 &designers.language-modifiers.language-modifier-to-charset;
 &designers.language-modifiers.language-modifier-truncate;
 &designers.language-modifiers.language-modifier-unescape;
 &designers.language-modifiers.language-modifier-upper;
 &designers.language-modifiers.language-modifier-wordwrap;

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
