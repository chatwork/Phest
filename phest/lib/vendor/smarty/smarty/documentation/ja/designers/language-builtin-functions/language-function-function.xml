<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4711 $ -->
<!-- EN-Revision: 4483 Maintainer: takagi Status: ready -->
<sect1 id="language.function.function">
 <title>{function}</title>
 <para>
  <varname>{function}</varname> は、テンプレート内で関数を作成します。
  これはプラグイン関数のようにコールすることができます。
  見た目に関する内容を生成するプラグインを書くよりは、
  それをテンプレート側に書いておいたほうが管理しやすくなるでしょう。
  深く込み入ったメニューなどのデータの取り回しもシンプルになります。
  </para>

  <note><para>
   テンプレート関数はグローバルに定義されます。Smarty のコンパイラはシングルパスのコンパイラなので、
   指定したテンプレートの外部で定義されたテンプレート関数をコールするときには
   <link linkend="language.function.call"><varname>{call}</varname></link>
   タグを使わなければなりません。それ以外の場合は、テンプレート内で直接
   <literal>{funcname ...}</literal> として関数を使うことができます。
  </para></note>

  <itemizedlist>
   <listitem><para>
    <varname>{function}</varname> タグには <parameter>name</parameter> 属性が必須です。
    ここに、テンプレート関数の名前を書きます。
    この名前のタグを使って、テンプレート関数をコールすることができます。
   </para></listitem>
      
   <listitem><para>
  <link linkend="language.syntax.attributes">属性</link>
  を使って、テンプレート関数に変数のデフォルト値を渡すことができます。
  PHP の関数宣言と同様に、デフォルト値に使えるのはスカラー値だけです。
  デフォルト値は、テンプレート関数をコールするときに上書きすることができます。
 </para></listitem>

 <listitem><para>
  テンプレート関数からは、呼び出し元テンプレートのすべての変数を使うことができます。
  テンプレート関数内での変数の値の変更や新たな変数の作成はローカルスコープで行われ、
  テンプレート関数の実行後は呼び出し元テンプレートからは見えなくなります。
  </para></listitem>
 </itemizedlist>
    
   <para><emphasis role="bold">属性</emphasis></para>
   <informaltable frame="all">
    <tgroup cols="5">
     <colspec colname="param" align="center" />
     <colspec colname="type" align="center" />
     <colspec colname="required" align="center" />
     <colspec colname="default" align="center" />
     <colspec colname="desc" />
     <thead>
      <row>
       <entry>属性名</entry>
       <entry>型</entry>
       <entry>必須</entry>
       <entry>デフォルト</entry>
       <entry>概要</entry>
      </row>
     </thead>
     <tbody>
    <row>
     <entry>name</entry>
     <entry>string</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>テンプレート関数の名前</entry>
    </row>
    <row>
     <entry>[var ...]</entry>
     <entry>[var type]</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>ローカルからテンプレート関数に渡すデフォルトの変数の値</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <note><para>
  任意の数のパラメータをテンプレート関数に渡せます。
  パラメータ変数は <literal>{funcname ...}</literal> タグの中で宣言してはいけません。
  ただし、デフォルト値を使いたい場合は別です。
  デフォルト値はスカラーでないといけません。変数にはできません。
  また、変数はテンプレートを呼ぶときに渡さないといけません。
 </para></note>
 
 <example>
  <title>再帰的なメニュー {function} の例</title>
  <programlisting>
<![CDATA[
{* 関数の定義 *}
{function name=menu level=0}
{function menu level=0}          {* 短縮形 *}
  <ul class="level{$level}">
  {foreach $data as $entry}
    {if is_array($entry)}
      <li>{$entry@key}</li>
      {menu data=$entry level=$level+1}
    {else}
      <li>{$entry}</li>
    {/if}
  {/foreach}
  </ul>
{/function}

{* 例として使う配列を作成します *}
{$menu = ['item1','item2','item3' => ['item3-1','item3-2','item3-3' =>
['item3-3-1','item3-3-2']],'item4']}

{* 配列を関数に渡します *}
{menu data=$menu}
]]>
  </programlisting>
 <para>
  出力は、次のようになります。
 </para> 
  <programlisting>
<![CDATA[
* item1
* item2
* item3
      o item3-1
      o item3-2
      o item3-3
            + item3-3-1
            + item3-3-2
* item4
]]>
  </programlisting>
 </example>

  <para>
  <link linkend="language.function.call"><varname>{call}</varname></link>
  も参照ください。
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

