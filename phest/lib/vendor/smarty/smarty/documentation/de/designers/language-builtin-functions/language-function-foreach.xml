<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2978 $ -->
<!-- EN-Revision: 1.8 Maintainer: andreas Status: ready -->
<sect1 id="language.function.foreach">
 <title>{foreach}, {foreachelse}</title>
 <para>
   Die <emphasis>foreach</emphasis> Schleife ist eine Alternative zu
   <link
   linkend="language.function.section"><emphasis>section</emphasis></link>.
   <emphasis>foreach</emphasis> wird verwendet, um ein assoziatives
   Array zu durchlaufen. Die Syntax von
   <emphasis>foreach</emphasis>-Schleifen ist viel einfacher als die
   von <emphasis>section</emphasis>. <emphasis>{foreach}</emphasis>
   Tags müssen mit <emphasis>{/foreach}</emphasis> tags kombiniert
   werden. Erforderliche Parameter sind: <emphasis>from</emphasis> und
   <emphasis>item</emphasis>. Der Name der {foreach}-Schleife kann
   frei vergeben werden und sowohl Buchstaben, Zahlen als auch
   Unterstriche enthalten. <emphasis>foreach</emphasis>-Schleifen
   können verschachtelt werden, dabei ist zu beachten, dass sich die
   definierten Namen voneinander unterscheiden. Die
   <emphasis>from</emphasis> Variable (normalerweise ein assoziatives
   Array) definiert die Anzahl der von <emphasis>foreach</emphasis> zu
   durchlaufenen Iterationen. <emphasis>foreachelse</emphasis> wird
   ausgeführt wenn keine Werte in der <emphasis>from</emphasis>
   Variable übergeben wurden.
 </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribut Name</entry>
     <entry>Typ</entry>
     <entry>Erforderlich</entry>       
     <entry>Standardwert</entry>
     <entry>Beschreibung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>from</entry>
     <entry>string</entry>
     <entry>Ja</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Name des zu durchlaufenden Array.</entry>
    </row>
    <row>
     <entry>item</entry>
     <entry>string</entry>
     <entry>Ja</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Name für das aktuelle Element.</entry>
    </row>
    <row>
     <entry>key</entry>
     <entry>string</entry>
     <entry>Nein</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Name für den aktuellen Schlüssel.</entry>
     </row>
     <row>
      <entry>name</entry>
      <entry>string</entry>
      <entry>Nein</entry>
      <entry><emphasis>n/a</emphasis></entry>
      <entry>Name der 'foreach'-Schleife, für die Abfrage der 'foreach'-Eigenschaften.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 <example>
  <title>{foreach} - item</title>
  <programlisting role="php">
<![CDATA[
<?php
$arr = array( 1001,1002,1003);
$smarty->assign('custid', $arr);
?>
]]>
  </programlisting>
  <programlisting>
<![CDATA[
<?php
{* dieses Beispiel gibt alle Werte aus dem $KundenId Array aus *}
{foreach from=$KundenId item=aktuelle_id}
 id: {$aktuelle_id}<br>
{/foreach}
]]>
  </programlisting>
  <para>
   Das obige Beispiel erzeugt folgende Ausgabe:
  </para>
  <screen>
<![CDATA[
id: 1000<br>
id: 1001<br>
id: 1002<br>
]]>
  </screen>
 </example>

 <example>
 <title>{foreach} - item und key</title>
  <programlisting role="php">
<![CDATA[
// Der Schlüssel enthält den Schlüssel des jeweils iterierten Wertes
// die Zuweisung sieht wie folgt aus:
<?php
 $smarty->assign('kontakte', array(
                             array('phone' => '1',
                                   'fax' => '2',
                                   'cell' => '3'),
                             array('phone' => '555-4444',
                                   'fax' => '555-3333',
                                   'cell' => '760-1234')
                             ));
?>
]]>
  </programlisting>
  <programlisting>
<![CDATA[
{foreach name=aussen item=kontakt from=$kontakte}
  <hr />
  {foreach key=schluessel item=wert from=$kontakt}
    {$schluessel}: {$wert}<br>
  {/foreach}
{/foreach}
  </programlisting>
  <para>
   Das obige Beispiel erzeugt folgende Ausgabe:
  </para>
  <screen>
<![CDATA[
<hr />
   phone: 1<br>
   fax: 2<br>
   cell: 3<br>
<hr />
   phone: 555-4444<br>
   fax: 555-3333<br>
   cell: 760-1234<br>
]]>
  </programlisting>
 </example>

 <example>
  <title>{foreach} - Beispiel mit Datenbankzugriff (z.B. PEAR oder ADODB)</title>
  <programlisting role="php">
<![CDATA[
<?php
  $sql = 'SELECT contact_id, name, nick FROM contacts ORDER BY contact';
  $smarty->assign('kontakte', $db->getAssoc($sql));
?>
]]>
  </programlisting>
  <programlisting>
<![CDATA[
{foreach key=cid item=con from=$kontakte}
  <a href="kontact.php?contact_id={$cid}">{$con.name} - {$con.nick}</a><br />
{/foreach}
]]>
  </programlisting>
 </example>

 <para>
  Foreach-Loops haben auch eigene Variablen welche die Foreach
  Eigenschaften enthalten. Diese werden wie folgt ausgewiesen:
  {$smarty.foreach.foreachname.varname}. foreachname ist der Name der
  als <emphasis>name</emphasis> Attribut von Foreach übergeben wurden.
 </para>

 <sect2 id="foreach.property.iteration">
  <title>iteration</title>
  <para>
   gibt die aktuelle iteration aus
  </para>
  <para>
   iteration beginnt immer mit 1 und wird danach bei jedem durchgang um 1 inkrementiert.
  </para>
 </sect2>

 <sect2 id="foreach.property.first">
  <title>first</title>
  <para>
   <emphasis>first</emphasis> ist TRUE wenn die aktuelle Iteration die erste ist
  </para>
 </sect2>
 <sect2 id="foreach.property.last">
  <title>last</title>
  <para>
   <emphasis>last</emphasis> ist TRUE wenn die aktuelle Iteration die letzte ist
  </para>
 </sect2>

 <sect2 id="foreach.property.show">
  <title>show</title>
  <para>
   <emphasis>show</emphasis> wird als Parameter von foreach verwedet
   und ist ein boolscher Wert, TRUE oder FALSE. Auf FALSE wird nichts
   ausgegeben und wenn foreachelse gefunden wird, dieser angezeigt.
  </para>
 </sect2>

 <sect2 id="foreach.property.total">
  <title>total</title>
  <para>
   <emphasis>total</emphasis> gibt die Anzahl Iterationen des Foreach
   Loops aus und kann in- oder nach- Foreach Blöcken verwendet werden.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
