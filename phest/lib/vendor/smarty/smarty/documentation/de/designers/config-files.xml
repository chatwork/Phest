<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2978 $ -->
<!-- EN-Revision: 1.7 Maintainer: andreas Status: ready -->
<chapter id="config.files">
 <title>Konfigurationsdateien</title>
 <para>
  Konfigurationsdateien sind ein praktischer Weg um Template-Variablen
  aus einer gemeinsamen Datei zu lesen. Ein Beispiel sind die
  Template-Farben. Wenn Sie die Farben einer Applikation anpassen
  wollen, müssen Sie normalerweise alle Templates durcharbeiten,
  und die entsprechenden Werte ändern. Mit einer
  Konfigurationsdatei können Sie alle Definitionen in einer
  einzigen Datei vornehmen, und somit auch einfach ändern.
 </para>
 <example>
  <title>Beispiel der Konfigurationsdatei-Syntax</title>
  <programlisting>
<![CDATA[
# global variables
pageTitle = "Main Menu"
bodyBgColor = #000000
tableBgColor = #000000
rowBgColor = #00ff00

[Customer]
pageTitle = "Customer Info"

[Login]
pageTitle = "Login"
focus = "username"
Intro = """Diese Zeile erstreckt sich über
		mehrere Zeilen, und muss deswegen
			mit dreifachen Anführungszeichen
				umschlossen werden."""

# hidden section
[.Database]
host=my.example.com
db=ADDRESSBOOK
user=php-user
pass=foobar
]]></programlisting>
 </example>
 <para>
  <link linkend="language.config.variables">Die Werte in einer
  Konfigurationsdatei</link> können in einfachen/doppelten
  Anführungszeichen notiert werden. Falls Sie einen Wert haben der
  sich über mehrere Zeilen ausbreitet muss dieser Wert in
  dreifachen Anführungszeichen (""") eingebettet werden. Die
  Kommentar-Syntax kann frei gewählt werden, solange sie nicht der
  normalen Syntax entsprechen. Wir empfehlen die Verwendung von
  <literal>#</literal> (Raute) am Anfang jeder Kommentar-Zeile.
 </para>
 <para>
  Dieses Beispiel hat 2 'sections'. 'section'-Namen werden von
  []-Zeichen umschlossen und können alle Zeichen ausser
  <literal>[</literal> und <literal>]</literal> enthalten. Die vier
  Variablen welche am Anfang der Datei definiert werden sind globale
  Variablen. Diese Variablen werden immer geladen. Wenn eine
  definierte 'section' geladen wird, werden also die globalen
  Variablen ebenfalls eingelesen. Wenn eine Variable sowohl global als
  auch in einer 'section' vorkommt, wird die 'section'-Variable
  verwendet. Wenn zwei Variablen in der gleichen 'section' den selben
  Namen aufweisen wird die Letztere verwendet, es sei denn <link
  linkend="variable.config.overwrite">$config_overwrite</link> ist
  deaktiviert ('false').
 </para>
 <para>
  Konfigurationsdateien werden mit <link
  linkend="language.function.config.load"><command>config_load</command></link>
  geladen.
 </para>
 <para>
  Sie können Variablen oder auch ganze 'sections' verstecken indem
  Sie dem Namen ein '.' voranstellen. Dies ist besonders wertvoll wenn
  Ihre Applikation sensitive Informationen aus der Konfigurationsdatei
  liest welche von der Template-Engine nicht verwendet werden. Falls
  eine Drittpartei eine Änderung an der Konfigurationsdatei
  vornimmt können Sie so sicherstellen, dass die sensitiven Daten
  nicht in deren Template geladen werden können.
 </para>
 <para>
  Siehe auch: <link
  linkend="language.function.config.load">{config_load}</link>, <link
  linkend="variable.config.overwrite">$config_overwrite</link>, <link
  linkend="api.get.config.vars">get_config_vars()</link>, <link
  linkend="api.clear.config">clear_config()</link> und <link
  linkend="api.config.load">config_load()</link>
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
