<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2978 $ -->
<!-- EN-Revision: 1.12 Maintainer: andreas Status: ready -->
<sect1 id="language.function.html.options">
 <title>html_options (Ausgabe von HTML-Options)</title>
 <para>
  {html_options} wird verwendet um HTML-Options Listen mit den
  übergebenen Daten zu erzeugen. Die <link
  linkend="language.custom.functions">Funktion</link> kümmert sich
  ebenfalls um das setzen des ausgewählten Standardwertes. Die
  Attribute 'values' und 'output' sind erforderlich, ausser man
  verwendet das Attribut 'options'.
 </para>

 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribut Name</entry>
     <entry>Typ</entry>
     <entry>Erforderlich</entry>       
     <entry>Standardwert</entry>
     <entry>Beschreibung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>values</entry>
     <entry>array</entry>
     <entry>Ja, ausser 'options'-Attribut wird verwendet.</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Array mit Werten für die dropdown-Liste.</entry>
    </row>
    <row>
     <entry>output</entry>
     <entry>array</entry>
     <entry>Ja, ausser 'options'-Attribut wird verwendet.</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Arrays mit Namen für die dropdown-Liste.</entry>
    </row>
    <row>
     <entry>selected</entry>
     <entry>string/array</entry>
     <entry>Nein</entry>
     <entry><emphasis>empty</emphasis></entry>
     <entry>Das ausgewählte Array Element.</entry>
    </row>
    <row>
     <entry>options</entry>
     <entry>associative array</entry>
     <entry>Ja, ausser wenn das 'values'- und das 'output'-Attribut verwendet werden.</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Assoziatives Array mit Werten die ausgegeben werden sollen.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <para>
  Wenn ein Wert als Array erkannt wird, wird er als HTML-OPTGROUP
  ausgegeben und die Werte werden in Gruppen dargestellt. Rekursion
  wird unterstützt. Die Ausgabe ist XHTML kompatibel.
 </para>
 <para>
  Wenn das (optionale) Attribute <emphasis>name</emphasis> angegeben
  wurde, wird um die &lt;option&gt;-Liste von &lt;select
  name="groupname"&gt;&lt;/select&gt;-Tags umschlossen
 </para>
 <para>
  Alle Parameter die deren Namen nicht in der obigen Liste genannt
  wurde, werden dem &lt;select&gt;-Tag als Name/Wert-Paare
  hinzugefügt. Die Parameter werden ignoriert, wenn kein
  <emphasis>name</emphasis>-Attribute angegeben wurde.
 </para>
 <example>
  <title>html_options</title>
  <para>
   <emphasis role="bold">Beispiel 1:</emphasis>
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$smarty->assign('cust_ids', array(1000,1001,1002,1003));
$smarty->assign('cust_names', array(
                              'Joe Schmoe',
                              'Jack Smith',
                              'Jane Johnson',
                              'Charlie Brown'));
$smarty->assign('customer_id', 1001);

?>
]]>
  </programlisting>
  <para>
   Wobei das Template wie folgt aussieht:
  </para>
  <programlisting>
<![CDATA[
<select name="customer_id">
   {html_options values=$cust_ids output=$cust_names selected=$customer_id}
</select>
]]>
  </programlisting>
  <para>
   <emphasis role="bold">Beispiel 2:</emphasis>
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$smarty->assign('cust_options', array(
                                1000 => 'Joe Schmoe',
                                1001 => 'Jack Smith',
                                1002 => 'Jane Johnson',
                                1003 => 'Charlie Brown')
                                );
$smarty->assign('customer_id', 1001);

?>
]]>
  </programlisting>
  <para>
   Wobei das Template wie folgt aussieht:
  </para>
  <programlisting>
<![CDATA[
{html_options name=customer_id options=$cust_options selected=$customer_id}
]]>
  </programlisting>
  <para>
   Beide Beispiele ergeben folgende Ausgabe:
  </para>
  <screen>
<![CDATA[
<select name="customer_id" size="4">
    <option label="Joe Schmoe" value="1000">Joe Schmoe</option>
    <option label="Jack Smith" value="1001" selected="selected">Jack Smith</option>
    <option label="Jane Johnson" value="1002">Jane Johnson</option>
    <option label="Charlie Brown" value="1003">Charlie Brown</option>
</select>
]]>
  </screen>
 </example>
 <para>
  Siehe auch <link
  linkend="language.function.html.checkboxes">{html_checkboxes}</link>
  und <link
  linkend="language.function.html.radios">{html_radios}</link>
 </para>
 <example>
  <title>{html_options} - Beispiel mit Datenbank (z.B. PEAR oder ADODB):</title>
  <programlisting role="php">
<![CDATA[
<?php

$sql = 'select type_id, types from types order by type';
$smarty->assign('types',$db->getAssoc($sql));

$sql = 'select contact_id, name, email, type_id
        from contacts where contact_id='.$contact_id;
$smarty->assign('contact',$db->getRow($sql));

?>
]]>
  </programlisting>
  <para>
   Wobei das Template wie folgt aussieht:
  </para>
  <programlisting>
<![CDATA[
<select name="type_id">
    <option value='null'>-- none --</option>
    {html_options name="type" options=$types selected=$contact.type_id}
</select>
]]>
  </programlisting>
 </example>
 <para>
  Siehe auch <link
  linkend="language.function.html.checkboxes">{html_checkboxes}</link>
  und <link
  linkend="language.function.html.radios">{html_radios}</link>
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
