<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2978 $ -->
<!-- EN-Revision: 1.19 Maintainer: andreas Status: ready -->
<chapter id="language.modifiers">
 <title>Variablen-Modifikatoren</title>
 <para>
  Variablen-Modifikatoren können auf alle Variablen angewendet
  werden, um deren Inhalt zu verändern. Dazu hängen sie einfach
  ein <literal>|</literal> (Pipe-Zeichen) und den Modifikatornamen an
  die entsprechende Variable an. Ein Modifikator über Parameter in
  seiner Arbeitsweise beinflusst werden. Diese Parameter werden dem
  Modifikatorname angehängt und mit <literal>:</literal> getrennt.
 </para>
 <example>
 <title>Modifikator Beispiel</title>
  <programlisting>
<![CDATA[
{* Modifikator auf eine Variable anwenden *}
{$titel|upper}
{* Modifikator mit Parametern *}
{$title|truncate:40:"..."}

{* Modifikator auf Funktionsparameter anwenden *}
{html_table loop=$myvar|upper}
{* mit Parametern *}
{html_table loop=$myvar|truncate:40:"..."}

{* formatierung einer Zeichenkette *}
{"foobar"|upper}

{* mit date_format das aktuelle Datum formatieren *}
{"now"|date_format:"%Y/%m/%d"}

{* modifier auf eigene Funktion anwenden *}
{mailto|upper address="me@domain.dom"}
]]>
  </programlisting>
 </example>
 <para>
  Wenn Sie einen Modifikator auf ein Array anwenden, wird dieser auf
  jeden Wert angewandt. Um zu erreichen, dass der Modifkator auf den
  Array selbst angewendet wird, muss dem Modifikator ein
  <literal>@</literal> Zeichen vorangestellt werden. Beispiel:
  <literal>{$artikelTitel|@count}</literal> (gibt die Anzahl Elemente
  des Arrays $artikelTitel aus.)
 </para>
 <para>
  Modifikatoren können aus Ihrem <link
  linkend="variable.plugins.dir">$plugins_dir</link> automatisch
  geladen (sehen Sie dazu auch <link
  linkend="plugins.naming.conventions">Naming Conventions</link>) oder
  explizit registriert werden (<link
  linkend="api.register.modifier">register_modifier</link>).
 </para>
 <para>
  Zudem können alle PHP-Funktionen implizit als Modifikatoren
  verwendet werden. (Das Beispiel mit dem <literal>@count</literal>
  Modifier verwendet die Funktion 'count()' von PHP und keinen Smarty
  Modifikator) PHP Funktionen zu verwenden eröffnet zwei Probleme:
  erstens: manchmal ist die Parameter Reiehnfolge nicht
  erwünscht. (<literal>{"%2.f"|sprintf:$float}</literal> funktioniert
  zwar, sieht aber als
  <literal>{$float|string_format:"%2.f"}</literal> das durch Smarty
  geliefert wird, besser aus. Zweitens: wenn <link
  linkend="variable.security">$security</link> auf TRUE gesetzt ist,
  müssen alle verwendeten PHP Funktionen im <link
  linkend="variable.security.settings">
  $security_settings['MODIFIER_FUNCS']</link>-Array enthalten sein.
 </para>
 <para>
  Siehe auch <link
  linkend="api.register.modifier">register_modifier()</link>, <link
  linkend="api.register.function">register_function()</link>, <link
  linkend="plugins">Smarty durch Plugins erweitern</link> und <link
  linkend="plugins.modifiers">Variablen-Modifikatoren</link>.
 </para>

 &designers.language-modifiers.language-modifier-capitalize;
 &designers.language-modifiers.language-modifier-cat;
 &designers.language-modifiers.language-modifier-count-characters;
 &designers.language-modifiers.language-modifier-count-paragraphs;
 &designers.language-modifiers.language-modifier-count-sentences;
 &designers.language-modifiers.language-modifier-count-words;
 &designers.language-modifiers.language-modifier-date-format;
 &designers.language-modifiers.language-modifier-default;
 &designers.language-modifiers.language-modifier-escape;
 &designers.language-modifiers.language-modifier-indent;
 &designers.language-modifiers.language-modifier-lower;
 &designers.language-modifiers.language-modifier-nl2br;
 &designers.language-modifiers.language-modifier-regex-replace;
 &designers.language-modifiers.language-modifier-replace;
 &designers.language-modifiers.language-modifier-spacify;
 &designers.language-modifiers.language-modifier-string-format;
 &designers.language-modifiers.language-modifier-strip;
 &designers.language-modifiers.language-modifier-strip-tags;
 &designers.language-modifiers.language-modifier-truncate;
 &designers.language-modifiers.language-modifier-upper;
 &designers.language-modifiers.language-modifier-wordwrap;

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
