<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2977 $ -->
<!-- EN-Revision: 1.6 Maintainer: andreas Status: ready -->
<sect1 id="language.function.cycle">
 <title>{cycle} (Zyklus)</title>
 <para>
  {cycle} wird verwendet um durch ein Set von Werten zu zirkulieren.
  Dies vereinfacht die Handhabung von zwei oder mehr Farben in einer
  Tabelle, oder um einen Array zu durchlaufen.
 </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribut Name</entry>
     <entry>Typ</entry>
     <entry>Erforderlich</entry>       
     <entry>Standardwert</entry>
     <entry>Beschreibung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>name</entry>
     <entry>string</entry>
     <entry>Nein</entry>
     <entry><emphasis>default</emphasis></entry>
     <entry>Der Name des Zyklus.</entry>
    </row>
    <row>
     <entry>values</entry>
     <entry>mixed</entry>
     <entry>Ja</entry>
     <entry><emphasis>N/A</emphasis></entry>
     <entry>
      Die Werte durch die zirkuliert werden soll, entweder als Komma
      separierte Liste (siehe 'delimiter'-Attribut), oder als Array.
     </entry>
    </row>
    <row>
     <entry>print</entry>
     <entry>boolean</entry>
     <entry>Nein</entry>
     <entry><emphasis>true</emphasis></entry>
     <entry>Definiert ob die Werte ausgegeben werden sollen oder
     nicht.</entry>
    </row>
    <row>
     <entry>advance</entry>
     <entry>boolean</entry>
     <entry>Nein</entry>
     <entry><emphasis>true</emphasis></entry>
     <entry>Definiert ob der nächste Wert automatisch angesprungen
     werden soll.</entry>
    </row>
    <row>
     <entry>delimiter</entry>
     <entry>string</entry>
     <entry>Nein</entry>
     <entry><emphasis>,</emphasis></entry>
     <entry>Das zu verwendende Trennzeichen.</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>Nein</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Der Name der Template-Variable welcher die Ausgabe
     zugewiesen werden soll.</entry>
    </row>
    <row>
     <entry>reset</entry>
     <entry>boolean</entry>
     <entry>No</entry>
     <entry><emphasis>false</emphasis></entry>
     <entry>Der Zyklus wird auf den ersten Wert zurückgesetzt.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  Sie können durch mehrere Sets gleichzeitig iterieren, indem Sie den
  Sets einmalige Namen geben.
 </para>
 <para>
  Um den aktuellen Wert nicht auszugeben, kann das 'print' Attribut
  auf 'false' gesetzt werden. Dies könnte sinnvoll sein, wenn man
  einen einzelnen Wert überspringen möchte.
 </para>
 <para>
  Das 'advance'-Attribut wird verwendet um einen Wert zu wiederholen.
  Wenn auf 'false' gesetzt, wird bei der nächsten Iteration der selbe
  Wert erneut ausgegeben.
 </para>
 <para>
  Wenn sie das spezielle 'assign'-Attribut übergeben, wird die Ausgabe
  der {cycle}-Funktion in dieser Template-Variable abgelegt, anstatt
  ausgegeben zu werden.
 </para>
 <example>
  <title>{cycle} (Zyklus)</title>
  <programlisting>
<![CDATA[
{section name=rows loop=$data}
<tr bgcolor="{cycle values="#eeeeee,#d0d0d0"}">
   <td>{$data[rows]}</td>
</tr>
{/section}
]]>
  </programlisting>
  <screen>
<![CDATA[
<tr bgcolor="#eeeeee">
   <td>1</td>
</tr>
<tr bgcolor="#d0d0d0">
   <td>2</td>
</tr>
<tr bgcolor="#eeeeee">
   <td>3</td>
</tr>
]]>
  </screen>
</example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
