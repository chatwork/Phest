<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2977 $ -->
<!-- EN-Revision: 1.4 Maintainer: andreas Status: ready -->
<sect1 id="language.function.eval">
 <title>{eval} (auswerten)</title>
 <para>
  {eval} wird verwendet um eine Variable als Template
  auszuwerten. Dies kann verwendet werden um Template-Tags/Variablen
  in einer Variable oder einer Konfigurationsdatei abzulegen.
 </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribut Name</entry>
     <entry>Typ</entry>
     <entry>Erforderlich</entry>       
     <entry>Standardwert</entry>
     <entry>Beschreibung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>var</entry>
     <entry>mixed</entry>
     <entry>Ja</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Variable oder Zeichenkette die ausgewertet werden soll.</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>Nein</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Die Template-Variable welcher die Ausgabe zugewiesen werden soll.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  Wenn Sie das spezielle 'assign'-Attribut Ã¼bergeben, wird die Ausgabe
  von 'eval' in dieser Template-Variable gespeichert und nicht
  ausgegeben.
 </para>
 <note>
  <title>Technische Bemerkung</title>
  <para>
   Evaluierte Variablen werden gleich wie Template-Variablen verwendet
   und folgen den selben Maskierungs- und Sicherheits-Features.
  </para>
 </note>
 <note>
  <title>Technische Bemerkung</title>
  <para>
   Evaluierte Variablen werden bei jedem Aufruf neu ausgewertet. Die
   kompilierten Versionen werden dabei nicht abgelegt! Falls sie caching
   eingeschaltet haben, wird die Ausgabe jedoch mit dem Rest des
   Templates gecached.
  </para>
 </note>
 <example>
  <title>eval (auswerten)</title>
  <programlisting>
<![CDATA[
setup.conf
----------

emphstart = <b>
emphend = </b>
title = Willkommen auf {$company}'s home page!
ErrorCity = Bitte geben Sie einen {#emphstart#}Stadtnamen{#emphend#} ein.
ErrorState = Bitte geben Sie einen {#emphstart#}Provinznamen{#emphend#} ein.
]]>
  </programlisting>
  <para>
   index.tpl:
  </para>
  <programlisting>
<![CDATA[
{config_load file="setup.conf"}

{eval var=$foo}
{eval var=#title#}
{eval var=#ErrorCity#}
{eval var=#ErrorState# assign="state_error"}
{$state_error}
]]>
  </programlisting>
  <para>
   Ausgabe des obigen Beispiels:
  </para>
  <screen>
<![CDATA[
Dies ist der Inhalt von foo:

Willkommen auf Pub & Grill's home page!
Bitte geben Sie einen <b>Stadtnamen</b> ein.
Bitte geben Sie einen <b>Provinznamen</b> ein.

]]>
  </screen>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
