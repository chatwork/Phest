<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.2 Maintainer: andreas Status: ready -->
  <sect1 id="plugins.prefilters.postfilters">
   <title>'pre'/'post'-Filter</title>
   <para>
    'pre'-Filter und 'post'-Filter folgen demselben Konzept. Der
    einzige Unterschied ist der Zeitpunkt der Ausf&uuml;hrung.
   </para>
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>smarty_prefilter_<replaceable>name</replaceable></function></funcdef>
     <paramdef>string <parameter>$source</parameter></paramdef>
     <paramdef>object <parameter>&amp;$smarty</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    'pre'-Filter werden verwendet, um die Quellen eines Templates direkt
    vor der Kompilierung zu verarbeiten. Als erster Parameter wird die
    Template-Quelle, die m&ouml;glicherweise bereits durch eine weiteren 'pre'-Filter
    bearbeitet wurden, &uuml;bergeben. Das Plugin muss den resultierenden Wert
    zur&uuml;ckgeben. Achtung: Diese Werte werden nicht gespeichert und nur
    zum Kompilier-Zeitpunkt verwendet.
   </para>
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>smarty_postfilter_<replaceable>name</replaceable></function></funcdef>
     <paramdef>string <parameter>$compiled</parameter></paramdef>
     <paramdef>object <parameter>&amp;$smarty</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    'post'-Filter werden auf die kompilierte Ausgabe direkt vor dem Speichern
    angewendet. Als erster Parameter wird der kompilierte Template-Code
    &uuml;bergeben, der m&ouml;glicherweise zuvor von anderen 'post'-Filtern
    bearbeitet wurde. Das Plugin muss den ver&auml;nderten Template-Code zur&uuml;ckgeben.
   </para>
   <example>
    <title>'pre'-Filter Plugin</title>
    <programlisting>
<![CDATA[
<?php
/*
 * Smarty plugin
 * -------------------------------------------------------------
 * File:     prefilter.pre01.php
 * Type:     prefilter
 * Name:     pre01
 * Purpose:  Convert html tags to be lowercase.
 * -------------------------------------------------------------
 */
 function smarty_prefilter_pre01($source, &$smarty)
 {
     return preg_replace('!<(\w+)[^>]+>!e', 'strtolower("$1")', $source);
 }
?>
]]>
     </programlisting>
   </example>
   <para></para>
   <example>
    <title>'post'-Filter Plugin</title>
    <programlisting>
<![CDATA[
<?php
/*
 * Smarty plugin
 * -------------------------------------------------------------
 * File:     postfilter.post01.php
 * Type:     postfilter
 * Name:     post01
 * Purpose:  Output code that lists all current template vars.
 * -------------------------------------------------------------
 */
 function smarty_postfilter_post01($compiled, &$smarty)
 {
     $compiled = "<pre>\n<?php print_r(\$this->get_template_vars()); ?>\n</pre>" . $compiled;
     return $compiled;
 }
?>
]]>
     </programlisting>
   </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
