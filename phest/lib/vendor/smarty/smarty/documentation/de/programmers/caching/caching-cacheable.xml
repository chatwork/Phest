<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2977 $ -->
<!-- EN-Revision: 1.8 Maintainer: andreas Status: ready -->
<sect1 id="caching.cacheable">
 <title>Die Ausgabe von cachebaren Plugins Kontrollieren</title>
 <para>
  Seit Smarty-2.6.0 kann bei der Registrierung angegeben werden ob ein
  Plugin cached werden soll. Der dritte Parameter für <link
  linkend="api.register.block">register_block</link>, <link
  linkend="api.register.compiler.function">register_compiler_function</link>
  und <link linkend="api.register.function">register_function</link>
  heisst <parameter>$cacheable</parameter>, der Standardwert ist TRUE,
  was das Verhalten von Smarty vor Version 2.6.0 wiederspiegelt.
 </para>
 <para>
  Wenn ein Plugin mit <parameter>$cacheable=false</parameter>
  registriert wird, wird er bei jedem Besuch der Seite aufgerufen,
  selbst wenn die Site aus dem Cache stammt. Die Pluginfunktion
  verhält sich ein wenig wie <link
  linkend="plugins.inserts">{insert}</link>.
 </para>
 <para>
  Im Gegensatz zu <link
  linkend="plugins.inserts">{insert}</link> werden die
  Attribute standartm&auml;ssig nicht gecached. Sie k&ouml;nnen das
  caching jedoch mit dem vierten Parameter
  <parameter>$cache_attrs</parameter>
  kontrollieren. <parameter>$cache_attrs</parameter> ist ein Array
  aller Attributnamen die gecached werden sollen.
 </para>

 <example>
  <title>Verhindern des Caching der Ausgabe eines Plugins</title>
  <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;
$smarty->caching = true;

function remaining_seconds($params, &$smarty) {
    $remain = $params['endtime'] - time();
    if ($remain >=0)
        return $remain . " second(s)";
    else
        return "done";
}

$smarty->register_function('remaining', 'remaining_seconds', false, array('endtime'));

if (!$smarty->is_cached('index.tpl')) {
 // Objekt $obj aus Datenbank dem Template zuweisen
  $smarty->assign_by_ref('obj', $obj);
}

$smarty->display('index.tpl');
?>
]]>
  </programlisting>
  <para>
   Bei folgendem index.tpl:
  </para>
  <programlisting>
<![CDATA[
Verbleibende Zeit: {remain endtime=$obj->endtime}
]]>
  </programlisting>
  <para>
   Der Wert von $obj->endtime &auml;ndert bei jeder Anzeige der Seite,
   selbst wenn die Seite gecached wurde. Das Objekt $obj wird nur
   geladen wenn die Seite nicht gecached wurde.
  </para>
 </example>
 <example>
 <title>Verhindern dass Template Blöcke gecached werden</title>
  <programlisting>
<![CDATA[
index.php:

<?php
require('Smarty.class.php');
$smarty = new Smarty;
$smarty->caching = true;

function smarty_block_dynamic($param, $content, &$smarty) {
    return $content;
}
$smarty->register_block('dynamic', 'smarty_block_dynamic', false);

$smarty->display('index.tpl');
?>
]]>
  </programlisting>
  <para>
   Bei folgendem index.tpl:
  </para>
  <programlisting>
<![CDATA[
Seite wurde erzeugt: {"0"|date_format:"%D %H:%M:%S"}

{dynamic}

Jetzt ist es: {"0"|date_format:"%D %H:%M:%S"}

... weitere Ausgaben ...

{/dynamic}
]]>

  </programlisting>
 </example>
 <para>
  Um sicherzustellen dass ein Teil eines Templates nicht gecached
  werden soll, kann dieser Abschnitt in einen {dynamic}...{/dynamic}
  Block verpackt werden.
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
