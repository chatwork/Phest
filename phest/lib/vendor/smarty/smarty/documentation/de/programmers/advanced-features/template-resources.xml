<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<!-- EN-Revision: 1.1 Maintainer: andreas Status: ready -->
  <sect1 id="template.resources">
   <title>Ressourcen</title>
   <para>
    Ein Template kann aus verschiedenen Quellen bezogen werden. Wenn Sie
    ein Template mit 'display()' ausgeben, die Ausgabe mit 'fetch()' 
    in einer Variablen speichern oder innnerhalb eines Template ein
    weiteres Template einbinden, m&uuml;ssen Sie den Ressourcen-Typ, 
    gefolgt von Pfad und Template-Namen angeben. Wenn kein Resourcetyp angegeben
    wird, wird <link linkend="variable.default.resource.type">$default_resource_type</link>
    verwendet.
   </para>
   <sect2 id="templates.from.template.dir">
    <title>Templates aus dem '$template_dir'</title>
    <para>
     Templates aus dem '$template_dir' ben&ouml;tigen normalerweise keinen Ressourcen-Typ,
     es wird jedoch empfohlen 'file:' zu verwenden. &Uuml;bergeben Sie einfach den Pfad,
     in dem sich das Template relativ zu '$template_dir' befindet.
    </para>
    <example>
     <title>Templates aus '$template_dir' verwenden</title>
     <programlisting>
      
      // im PHP-Skript
      $smarty->display("index.tpl");
      $smarty->display("admin/menu.tpl");
      $smarty->display("file:admin/menu.tpl"); // entspricht der vorigen Zeile
      
      
      {* im Smarty Template *}
      {include file="index.tpl"}
      {include file="file:index.tpl"} {* entspricht der vorigen Zeile *}</programlisting>
    </example>
   </sect2>
   <sect2 id="templates.from.any.dir">
    <title>Templates aus beliebigen Verzeichnissen</title>
    <para>
     Templates ausserhalb von '$template_dir' ben&ouml;tigen den 'file:' Ressourcen-Typ,
     gefolgt von absolutem Pfadnamen und Templatenamen.
    </para>
    <example>
     <title>Templates aus beliebigen Verzeichnissen benutzen</title>
     <programlisting>
      
      // im PHP-Skript
      $smarty->display("file:/export/templates/index.tpl");
      $smarty->display("file:/path/to/my/templates/menu.tpl");
      
      
      {* im Smarty Template *}
      {include file="file:/usr/local/share/templates/navigation.tpl"}</programlisting>
    </example>
    
    <sect3 id="templates.windows.filepath">
     <title>Windows Dateipfade</title>
     <para>
      Wenn Sie auf einer Windows-Maschine arbeiten, enthalten absoluten Dateipfade
      normalerweise den Laufwerksbuchstaben (C:). Stellen Sie sicher,
      dass alle Pfade den Ressourcen-Typ 'file:' haben, um Namespace-Konflikten
      vorzubeugen.
     </para>
     <example>
      <title>Templates aus Windows Dateipfaden verwenden</title>
      <programlisting>
       
       // im PHP-Skript
       $smarty->display("file:C:/export/templates/index.tpl");
       $smarty->display("file:F:/path/to/my/templates/menu.tpl");
       
       
       {* im Smarty Template *}
       {include file="file:D:/usr/local/share/templates/navigation.tpl"}</programlisting>
     </example>
    </sect3>
   </sect2>
   
   <sect2 id="templates.from.elsewhere">
    <title>Templates aus anderen Quellen</title>
    <para>
     Sie k&ouml;nnen Templates aus jeder f&uuml;r PHP verf&uuml;gbaren Datenquelle beziehen:
     Datenbanken, Sockets, LDAP, usw. Dazu m&uuml;ssen sie nur ein
     Ressource-Plugin schreiben und registrieren.
    </para>
    
    <para>
     Konsultieren Sie den Abschnitt &uuml;ber <link linkend="plugins.resources">Ressource-Plugins</link>
     f&uuml;r mehr Informationen &uuml;ber die Funktionalit&auml;ten, die ein derartiges Plugin bereitstellen muss.
    </para> 
    
    <note>
     <para>
      Achtung: Sie k&ouml;nnen die interne <literal>file</literal> Ressource nicht
      &uuml;berschreiben. Es steht Ihnen jedoch frei, ein Plugin zu schreiben,
      das die gew&uuml;nschte Funktionalit&auml;t implementiert und es als alternativen
      Ressource-Typ zu registrieren.
     </para>
    </note>
    <example>
     <title>Eigene Quellen verwenden</title>
     <programlisting>
      
      // im PHP-Skript
      
      
      // definieren Sie folgende Funktion in Ihrer Applikation
      function db_get_template ($tpl_name, &amp;tpl_source, &amp;$smarty_obj)
      {
      // Datenbankabfrage um unser Template zu laden,
      // und '$tpl_source' zuzuweisen
      $sql = new SQL;
      $sql->query("select tpl_source
      from my_table
      where tpl_name='$tpl_name'");
      if ($sql->num_rows) {
      $tpl_source = $sql->record['tpl_source'];
      return true;
      } else {
      return false;
      }
      }
      
      function db_get_timestamp($tpl_name, &amp;$tpl_timestamp, &amp;$smarty_obj)
      {
      
      // Datenbankabfrage um '$tpl_timestamp' zuzuweisen
      $sql = new SQL;
      $sql->query("select tpl_timestamp
      from my_table
      where tpl_name='$tpl_name'");
      if ($sql->num_rows) {
      $tpl_timestamp = $sql->record['tpl_timestamp'];
      return true;
      } else {
      return false;
      }
      }
      
      function db_get_secure($tpl_name, &amp;$smarty_obj)
      {
      
      // angenommen alle Templates sind sicher
      return true;
      }
      
      function db_get_trusted($tpl_name, &amp;$smarty_obj)
      {
      
      // wird f&uuml;r Templates nicht verwendet
      }
      
      
      // Ressourcen-Typ 'db:' registrieren
      $smarty->register_resource("db", array("db_get_template",
      "db_get_timestamp",
      "db_get_secure",
      "db_get_trusted"));
      
      
      // Ressource im PHP-Skript verwenden
      $smarty->display("db:index.tpl");
      
      
      {* Ressource in einem Smarty Template verwenden *}
      {include file="db:/extras/navigation.tpl"}</programlisting>
    </example>
   </sect2>
   
   <sect2 id="default.template.handler.function">
    <title>Standard Template-Handler</title>
    <para>
     Sie k&ouml;nnen eine Funktion definieren, die aufgerufen wird,
     wenn ein Template nicht aus der angegeben Ressource geladen werden konnte.
     Dies ist z. B. n&uuml;tzlich, wenn Sie fehlende Templates on-the-fly 
     generieren wollen.
    </para>
    <example>
     <title>Standard Template-Handler verwenden</title>
     <programlisting>
      &lt;?php
      
      // f&uuml;gen Sie folgende Zeilen in Ihre Applikation ein
      
      function make_template ($resource_type, $resource_name, &amp;$template_source, &amp;$template_timestamp, &amp;$smarty_obj)
      {
      if( $resource_type == 'file' ) {
      if ( ! is_readable ( $resource_name )) {
      
      // erzeuge Template-Datei, gib Inhalte zur&uuml;ck
      $template_source = "This is a new template.";
      $template_timestamp = time();
      $smarty_obj->_write_file($resource_name, $template_source);
      return true;
      }
      } else {
      
      // keine Datei
      return false;
      }
      }
      
      
      // Standard Handler definieren
      $smarty->default_template_handler_func = 'make_template';
      ?&gt;</programlisting>
    </example>
   </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
