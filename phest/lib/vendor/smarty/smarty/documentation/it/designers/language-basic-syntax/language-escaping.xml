<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<sect1 id="language.escaping">
 <title>Evitare il parsing di Smarty</title>
 <para>
  A volte è desiderabile o necessario che Smarty ignori sezioni che altrimenti
  verrebbero analizzate. Un esempio tipico è l'incorporazione di codice Javascript
  o CSS in un template. Il problema nasce dal fatto che questi linguaggi utilizzano
  i caratteri { e } che per Smarty sono i delimitatori di default.
 </para>

 <para>
  La cosa più semplice sarebbe evitare queste situazioni tenendo il codice Javascript
  e CSS separato in appositi file e usando i collegamenti standard dell'HTML per
  recuperarli.
 </para>

 <para>
  E' possibile includere contenuto letterale usando blocchi di questo tipo: 
  <link linkend="language.function.literal">{literal} .. {/literal}</link>.
  Potete anche usare, in modo simile alle entità HTML, <link
  linkend="language.function.ldelim">{ldelim}</link>,<link
  linkend="language.function.ldelim">{rdelim}</link> oppure <link
  linkend="language.variables.smarty.ldelim">{$smarty.ldelim}</link>,<link
  linkend="language.variables.smarty.rdelim">{$smarty.rdelim}</link>
  per visualizzare i delimitatori senza che Smarty ne analizzi il contenuto.
 </para>

 <para>
  Spesso risulta semplicemente conveniente cambiare il <link
  linkend="variable.left.delimiter">$left_delimiter</link> ed il
  <link linkend="variable.right.delimiter">$right_delimiter</link> di Smarty.
 </para>
 <example>
  <title>esempio di cambio dei delimitatori</title>
  <programlisting role="php">
<![CDATA[
<?php

$smarty = new Smarty;
$smarty->left_delimiter = '<!--{';
$smarty->right_delimiter = '}-->';
$smarty->assign('foo', 'bar');
$smarty->display('example.tpl');

?>
]]>
  </programlisting>
  <para>
   Dove example.tpl è:
  </para>
  <programlisting>
<![CDATA[
<script language="javascript">
var foo = <!--{$foo}-->;
function dosomething() {
    alert("foo is " + foo);
}
dosomething();
</script>
]]>
  </programlisting>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
