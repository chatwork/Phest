<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
 <sect1 id="language.function.ldelim">
  <title>{ldelim},{rdelim}</title>
  <para>
   {ldelim} y {rdelim} son usados para  
   <link linkend="language.escaping">escapar</link> delimitadores en el template, 
   en nuestro caso "{" or "}". Usted puede usar solo 
   <link linkend="language.function.literal">{literal}{/literal}</link> para
   escapar bloques de texto.
   Vea tambien <link linkend="language.variables.smarty.ldelim">{$smarty.ldelim}</link>.
  </para>
  <example>
   <title>{ldelim}, {rdelim}</title>
   <programlisting>
<![CDATA[
{* Esto mostrara los delimitadores del template *}

{ldelim}funcname{rdelim} is how functions look in Smarty!
]]>
   </programlisting>
   <para>
    La salida del ejemplo de arriba:
   </para>
   <screen>
<![CDATA[
{funcname} is how functions look in Smarty!
]]>
   </screen>
   <para>Otros ejemplos con algunos javascript</para>
   <programlisting>
<![CDATA[
<script language="JavaScript">
function foo() {ldelim}
    ... code ...
{rdelim}
</script>
]]>
   </programlisting>
   <para>
   esta es la salida
   </para>
   <screen>
<![CDATA[
<script language="JavaScript">
function foo() {
    .... code ...
}
</script>
]]>
   </screen>

  </example>
  <para>Vea tambi√©n <link linkend="language.escaping">Escaping Smarty Parsing</link> </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
