<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<chapter id="language.modifiers">
 <title>Modificadores de variables</title>
 <para>
  Los modificadores de variables pueden ser aplicados a variables, 
  funciones habituales o cadenas. Para aplicar un modificador, especifique 
  el valor seguido por <literal>|</literal>(pipe) y el nombre del modificador.
  Un modificador necesita parámetros adicionales que afetan en su funcionamento.
  Estos parámetros siguen al nombre del modificador y son separados por
  <literal>:</literal> (dos puntos).
 </para>
 <example>
  <title>Ejemplo de modificador</title>
  <programlisting>
<![CDATA[
{* apply modifier to a variable *}
{$title|upper}
{* modifier with parameters *}
{$title|truncate:40:"..."}

{* apply modifier to a function parameter *}
{html_table loop=$myvar|upper}
{* with parameters *}
{html_table loop=$myvar|truncate:40:"..."}

{* apply modifier to literal string *}
{"foobar"|upper}

{* using date_format to format the current date *}
{$smarty.now|date_format:"%Y/%m/%d"}

{* apply modifier to a custom function *}
{mailto|upper address="me@domain.dom"}
]]>
  </programlisting>
 </example>
 <para>
  Si usted aplica un modificador a una matriz en lugar del valor de 
  una variable, el modificador va a ser aplicado en cada uno de los 
  valores de la matriz.  Si usted realmente quisiera que el modificador 
  funcionara en una matriz entera, debe colocar el simbolo
  <literal>@</literal> antes del nombre del modificador, así como:
  <literal>{$articleTitle|@count}</literal> (esto mostrara el número de 
  elementos de la matriz $articleTitle.)
 </para>
 <para>
  Los modificadores pueden ser cargados automáticamente a partir de su
  <link linkend="variable.plugins.dir">$plugins_dir</link> (vea también:
  <link linkend="plugins.naming.conventions">Naming Conventions</link>) 
  o pueden ser registrados explicitamente (vea: 
  <link linkend="api.register.modifier">register_modifier</link>). 
  Adicionalmente, todas las funciones de php pueden ser
  utilizadas como modificadores implicitamente. 
  (El ejemplo <literal>@count</literal> de arriba usa actualmente la
  función count de php y no un modificador de Smarty).
  Usar funciones de php como modificadores tiene dos pequeños problemas:
  Primero, algunas veces al ordenar los parámetros de una función
  esto no es aconsejable (<literal>{"%2.f"|sprintf:$float}</literal>
  actualmente funciona, pero existe algo mas intuitivo 
  Por ejemplo: <literal>{$float|string_format:"%2.f"}</literal>
  que es proporcionado con la distribución de Smarty).
  Segundo: con <link linkend="variable.security">$security</link> activado, 
  todas las funciones de php que sean utilizadas como modificadores deben 
  ser declaradas como variables de una matriz 
  <link linkend="variable.security.settings">$security_settings['MODIFIER_FUNCS']
  </link>.
 </para>
 <para>
  Ver también
  <link linkend="api.register.modifier">register_modifier()</link>,
  <link linkend="api.register.function">register_function()</link>,
  <link linkend="plugins">Extending Smarty with plugins</link>
  y <link linkend="plugins.modifiers">modifiers</link>,
 </para>


 &designers.language-modifiers.language-modifier-capitalize;
 &designers.language-modifiers.language-modifier-cat;
 &designers.language-modifiers.language-modifier-count-characters;
 &designers.language-modifiers.language-modifier-count-paragraphs;
 &designers.language-modifiers.language-modifier-count-sentences;
 &designers.language-modifiers.language-modifier-count-words;
 &designers.language-modifiers.language-modifier-date-format;
 &designers.language-modifiers.language-modifier-default;
 &designers.language-modifiers.language-modifier-escape;
 &designers.language-modifiers.language-modifier-indent;
 &designers.language-modifiers.language-modifier-lower;
 &designers.language-modifiers.language-modifier-nl2br;
 &designers.language-modifiers.language-modifier-regex-replace;
 &designers.language-modifiers.language-modifier-replace;
 &designers.language-modifiers.language-modifier-spacify;
 &designers.language-modifiers.language-modifier-string-format;
 &designers.language-modifiers.language-modifier-strip;
 &designers.language-modifiers.language-modifier-strip-tags;
 &designers.language-modifiers.language-modifier-truncate;
 &designers.language-modifiers.language-modifier-upper;
 &designers.language-modifiers.language-modifier-wordwrap;
  
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
