<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<sect1 id="language.function.config.load">
 <title>config_load</title>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nombre del Atributo</entry>
     <entry>Tipo</entry>
     <entry>Requerido</entry>
     <entry>Default</entry>
     <entry>Descripción</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>file</entry>
     <entry>string</entry>
     <entry>Si</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>El nombre del archivo de configuración a incluir</entry>
    </row>
    <row>
     <entry>section</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>El nombre de la sección a cargar</entry>
    </row>
    <row>
     <entry>scope</entry>
     <entry>string</entry>
     <entry>no</entry>
     <entry><emphasis>local</emphasis></entry>
     <entry>
       Como el scope carga las variables debe ser tratado de
       manera local, como padre y no como global. local indica 
       que las variables son cargadas en el contexto del template
       local. parent indica que las variables son cargadas en el 
       contexto actual y en el template que llamo. global indica 
       que las variables estan disponibles para todos los templates.
     </entry>
    </row>
    <row>
     <entry>global</entry>
     <entry>boolean</entry>
     <entry>No</entry>
     <entry><emphasis>No</emphasis></entry>
     <entry>
      Cuando las variables no son vistas en el template
      padre (al que llamo este), lo mismo que scope=parent.
      NOTA: este atributo esta obsoleto pero el atributo scope, 
      puede dar el soporte. Si scope es el indicado, este valor 
      es ignorado.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  Esta función es usada para cargar las <link
   linkend="language.config.variables">#variables#</link> 
  de un archivo de configuración dentro de un template.
  Vea <link linkend="config.files">Config Files</link> para mayor 
  información.
 </para>
 <example>
  <title>Función {config_load}</title>
  <para>
     ejemplo.conf
  </para>
  <programlisting>
<![CDATA[
#this is config file comment

# global variables
pageTitle = "Main Menu"
bodyBgColor = #000000
tableBgColor = #000000
rowBgColor = #00ff00

#customer variables section
[Customer]
pageTitle = "Customer Info"
]]>
  </programlisting>
  <para>y el template</para>
 <programlisting>
 <![CDATA[
 {config_load file="example.conf"}

 <html>
      <title>{#pageTitle#|default:"No title"}</title>
      <body bgcolor="{#bodyBgColor#}">
     <table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}">
         <tr bgcolor="{#rowBgColor#}">
             <td>First</td>
             <td>Last</td>
             <td>Address</td>
         </tr>
     </table>
     </body>
 </html>
 ]]>
 </programlisting>
 </example>
 <para>
  Los <link linkend="config.files">archivos de configuración</link> 
  pueden contener secciones también. Usted puede cargar variables de 
  una sección adicionando el atributo <emphasis>'section'</emphasis>.
 </para>
 <note>
  <para>
   <emphasis>Config file sections</emphasis> es la función integrada 
   de template  <link
    linkend="language.function.section"><emphasis>{section}</emphasis></link> 
   no tiene nada que ver uno con el otro, ellos justamente por casualidad 
   tiene en común el convensionalismo del nombre.
  </para>
 </note>
 <example>
  <title>Función config_load con section</title>
  <programlisting>
<![CDATA[
{config_load file="ejemplo.conf" section="Customer"}

<html>
<title>{#pageTitle#}</title>
<body bgcolor="{#bodyBgColor#}">
<table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}">
   <tr bgcolor="{#rowBgColor#}">
      <td>First</td>
      <td>Last</td>
      <td>Address</td>
   </tr>
</table>
</body>
</html>
]]>
  </programlisting>
 </example>
 <para>
  Vea también <link linkend="config.files">Config files</link>,
  <link linkend="language.config.variables">Config variables</link>,
  <link linkend="variable.config.dir">$config_dir</link>,
  <link linkend="api.get.config.vars">get_config_vars()</link>
  y <link linkend="api.config.load">config_load()</link>.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
