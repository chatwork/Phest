<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<sect1 id="language.escaping">
 <title>Escaping Smarty Parsing</title>
 <para>
  En algunas ocaciones es deseable o hasta necesario que Smarty tenga que
  ingonar sections o algun otro tipo analisis de sintaxis. Un ejemplo clasico 
  es con el codigo JavaScript o CSS incrustado en el template. El problema se
  origina cuando aquellos lenguajes que utilizan los caracteres { y } los
  cuales son también los <link
  linkend="language.function.ldelim">delimitadores</link> por default para Smarty.
 </para>

 <para>
  Esta puede ser una simple situación separando enteramente su codigo JavaScript 
  y CSS dentro de un archivo personal y utilizar el metodo standar del HTML para 
  el acceso.
 </para>

 <para>
  Es posible usar literal incluyendo el contenido del bloque <link 
  linkend="language.function.literal">{literal} .. {/literal}</link>.
  Similar a usar entidades HTML, usted puede usar <link 
  linkend="language.function.ldelim">{ldelim}</link>,<link 
  linkend="language.function.ldelim">{rdelim}</link> o <link 
  linkend="language.variables.smarty.ldelim">{$smarty.ldelim}</link>
  para mostrar los delimitadores actuales.
 </para>

 <para>
  Esto a menudo es conveniente para cambios simples a Smarty's <link 
  linkend="variable.left.delimiter">$left_delimiter</link> y 
  <link linkend="variable.right.delimiter">$right_delimiter</link>.
 </para>
 <example>
  <title>Ejemplo cambiando delimitadores</title>
  <programlisting role="php">
<![CDATA[
<?php

$smarty = new Smarty;
$smarty->left_delimiter = '<!--{';
$smarty->right_delimiter = '}-->';
$smarty->assign('foo', 'bar');
$smarty->display('example.tpl');

?>
]]>
  </programlisting>
  <para>
   Donde example.tpl es:
  </para>
  <programlisting>
<![CDATA[
<script language="javascript">
var foo = <!--{$foo}-->;
function dosomething() {
    alert("foo is " + foo);
}
dosomething();
</script>
]]>
  </programlisting>
 </example>
  <para>
     Ver También <link linkend="language.modifier.escape">escape modifier</link>
  </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
