<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
 <sect1 id="caching.cacheable">
  <title>Controlando salida de Cacheabilidad de plugins</title>
  <para>
   Desde Smarty-2.6.0 los caches de plugins pueden ser declarados 
   o registrados. 
   El tercer parámetro para <link linkend="api.register.block">register_block()</link>, 
   <link linkend="api.register.compiler.function">register_compiler_function()</link> 
   y <link linkend="api.register.block">register_function()</link> es llamado 
   <parameter>$cacheable</parameter> y el default es true que es 
   también el comportamiento de plugins en la versiones anteriores 
   a Smarty 2.6.0.
  </para>

  <para>
   Cuando registre un plugin con $cacheable=false el plugin es llamado 
   todo el tiempo en la pagina que está siendo mostrada, aun si la 
   pagina viene desde el cache.
   La función de plugin tiene un comportamiento parecido al de 
   la función <link linkend="plugins.inserts">insert</link>.
  </para>

  <para>
   En contraste con <link linkend="language.function.insert">{insert}</link> 
   el atributo para el plugin no está en cache por default. Ellos pueden ser 
   declarados para ser cacheados con el cuarto parámetro
   <parameter>$cache_attrs</parameter>. <parameter>$cache_attrs</parameter>
   es un arreglo de nombres de atributos que deben ser cacheados, entonces la 
   función de plugin pega el valor como si fuera el tiempo en que la pagina 
   fue escrita para el cache todo el tiempo este es traido desde el cache.
  </para>

  <example>
   <title>Previniendo que una saída de plugin de ser cacheada</title>
   <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;
$smarty->caching = true;

function remaining_seconds($params, &$smarty) {
    $remain = $params['endtime'] - time();
    if ($remain >=0)
        return $remain . " second(s)";
    else
        return "done";
}

$smarty->register_function('remaining', 'remaining_seconds', false, array('endtime'));

if (!$smarty->is_cached('index.tpl')) {
    // fetch $obj from db and assign...
    $smarty->assign_by_ref('obj', $obj);
}

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    Donde index.tpl es:
   </para>
   <programlisting>
<![CDATA[
Time Remaining: {remaining endtime=$obj->endtime}
]]>
   </programlisting>
   <para>
    El número en segundos hasta el endtime del $obj este sufre cambios
    en cada display de la pagina, aun si la pagina esta en cache. Desde 
    que el atributo endtime sea cacheado el objeto solamente tiene que 
    ser jalado de la base de datos cuando la pagina esta escrita en la 
    cache mas no en requisiciones de la pagina.
   </para>
  </example>

  <example>
   <title>Previniendo una pasada entera del template para el cache</title>
   <programlisting role="php">
<![CDATA[
index.php:

<?php
require('Smarty.class.php');
$smarty = new Smarty;
$smarty->caching = true;

function smarty_block_dynamic($param, $content, &$smarty) {
    return $content;
}
$smarty->register_block('dynamic', 'smarty_block_dynamic', false);

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    Donde index.tpl es:
   </para>
   <programlisting>
<![CDATA[
Page created: {"0"|date_format:"%D %H:%M:%S"}

{dynamic}

Now is: {"0"|date_format:"%D %H:%M:%S"}

... do other stuff ...

{/dynamic}
]]>
   </programlisting>
  </example>
  
  <para>
   Cuando recarga la pagina usted notara que ambas fechas son diferentes.
   Una es "dinamica" y la otra es "estática". Usted puede hacer todo entre 
   las etiquetas {dynamic}...{/dynamic} y tener la certeza de que no sera 
   cacheado como el resto de la pagina.
  </para>
  
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
