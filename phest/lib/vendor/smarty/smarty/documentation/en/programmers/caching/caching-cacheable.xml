<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3842 $ -->
 <sect1 id="caching.cacheable">
  <title>Controlling Cacheability of Output</title>
  <para>
   If caching is enabled normally the whole final output of the page gets cached. However Smarty3 offers
   several options how to exclude sections of your output from caching.
  </para>
  <note>
   <title>General Note</title>
   <para>
    Be sure any variables used within a non-cached section are 
    also assigned from PHP when the page is loaded from the cache.
   </para>
  </note>
  <sect2 id="cacheability.sections">
   <title>Cacheability of Template Section</title>
   <para>
    A larger section of your template can easily excluded from caching by using the <link linkend="language.function.nocache"><varname>{nocache}</varname></link>
    and <link linkend="language.function.nocache"><varname>{/nocache}</varname></link> tags.
   </para>
   <example>
    <title>Preventing a template section from being cached</title>
    <programlisting>
<![CDATA[

Today's date is
{nocache}
{$smarty.now|date_format}
{/nocache}
]]>
   </programlisting>
    <para>
     The above code will output the current date on a cached page.
    </para>
   </example>
  </sect2>
  <sect2 id="cacheability.tags">
   <title>Cacheability of Tags</title>
   <para>
    Caching for an individual tag can be disabled by adding the "nocache" option flag to the tag.
   </para>
   <example>
    <title>Preventing tag output from being cached</title>
    <programlisting>
<![CDATA[
Today's date is
{$smarty.now|date_format nocache}
]]>
    </programlisting>
   </example>
  </sect2>
  <sect2 id="cacheability.variables">
   <title>Cacheability of Variables</title>
   <para>
    You can <link linkend="api.assign"><varname>assign()</varname></link> variables as not cachable.
    Any tag which uses such variable will be automatically executed in nocache mode.
   </para>
   <note>
    <title>Note</title>
    <para>
     If a tag is executed in nocache mode you must make sure that all other variables used by that tag are 
     also assigned from PHP when the page is loaded from the cache.
    </para>
   </note>
   <note>
    <title>Note</title>
    <para>
     The nocache status of an assigned variable will effect the compiled template code. If you change the status you must manually 
     delete existing compiled and cached template files to force a recompile.
    </para>
   </note>
   <example>
    <title>Nocache Variables</title>
    <programlisting>
<![CDATA[
// assign $foo as nocahe variable
$smarty->assign('foo',time(),true);
]]>
<![CDATA[
Dynamic time value is {$foo}
]]>
    </programlisting>
   </example>
  </sect2>
  <sect2 id="cacheability.plugins">
     <title>Cacheability of Plugins</title>
     <para>
      The cacheability of plugins can be
   declared when registering them. The third parameter to
   <link linkend="api.register.plugin"><varname>registerPlugin()</varname></link>
    is called <parameter>$cacheable</parameter> and defaults to &true;.
  </para>
  <para>
   When registering a plugin with <literal>$cacheable=false</literal> the plugin
   is called everytime the page is displayed, even if the page comes
   from the cache. The plugin function behaves a little like an
   <link linkend="plugins.inserts"><varname>{insert}</varname></link> function.
  </para>
   <note>
    <title>Note</title>
    <para>
     The <parameter>$cacheable</parameter> status will effect the compiled template code. If you change the status you must manually 
     delete existing compiled and cached template files to force a recompile.
    </para>
   </note>
   <para>
   In contrast to <link linkend="plugins.inserts"><varname>{insert}</varname>
   </link>
   the attributes to the plugins are not cached by default. They can be
   declared to be cached with the fourth parameter
   <parameter>$cache_attrs</parameter>. <parameter>$cache_attrs</parameter>
   is an array of attribute-names that should be cached, so the
   plugin-function get value as it was the time the page was written
   to cache everytime it is fetched from the cache.
  </para>

  <example>
   <title>Preventing a plugin's output from being cached</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

function remaining_seconds($params, $smarty) {
    $remain = $params['endtime'] - time();
    if($remain >= 0){
        return $remain . ' second(s)';
    }else{
        return 'done';
    }
}

$smarty->registerPlugin('function','remaining', 'remaining_seconds', false, array('endtime'));

if (!$smarty->isCached('index.tpl')) {
    // fetch $obj from db and assign...
    $smarty->assignByRef('obj', $obj);
}

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    where <filename>index.tpl</filename> is:
   </para>
   <programlisting>
<![CDATA[
Time Remaining: {remaining endtime=$obj->endtime}
]]>
   </programlisting>
   <para>
    The number of seconds till the endtime of <literal>$obj</literal> is reached
    changes on each display of the page, even if the page is cached. Since the
    endtime attribute is cached the object only has to be pulled from the
    database when page is written to the cache but not on subsequent requests
    of the page.
   </para>
  </example>

  <example>
   <title>Preventing a whole passage of a template from being cached</title>
   <programlisting role="php">
<![CDATA[
index.php:

<?php
$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

function smarty_block_dynamic($param, $content, $smarty) {
    return $content;
}
$smarty->registerPlugin('block','dynamic', 'smarty_block_dynamic', false);

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    where <filename>index.tpl</filename> is:
   </para>
   <programlisting>
<![CDATA[
Page created: {'0'|date_format:'%D %H:%M:%S'}

{dynamic}

Now is: {'0'|date_format:'%D %H:%M:%S'}

... do other stuff ...

{/dynamic}
]]>
   </programlisting>
  </example>

  <para>
   When reloading the page you will notice that both dates differ. One
   is <quote>dynamic</quote> one is <quote>static</quote>. You can do everything
    between <literal>{dynamic}...{/dynamic}</literal> and be sure it will not
    be cached like the rest of the page.
  </para>
   <note>
   <title>Note</title>
   <para>
    The above example shall just demonstrate how a dynamic block plugins works.
    See <link linkend="cacheability.sections"><parameter>Cacheability of Template Section</parameter></link> on how to disable 
    caching of a template section by the built-in <link linkend="language.function.nocache"><varname>{nocache}</varname></link>
    and <link linkend="language.function.nocache"><varname>{/nocache}</varname></link> tags.
   </para>
   </note>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
