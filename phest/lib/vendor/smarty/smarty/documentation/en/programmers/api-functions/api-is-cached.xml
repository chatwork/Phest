<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3849 $ -->
<refentry id="api.is.cached">
 <refnamediv>
  <refname>isCached()</refname>
  <refpurpose>returns true if there is a valid cache for this template</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>bool</type><methodname>isCached</methodname>
   <methodparam><type>string</type><parameter>template</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>cache_id</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>compile_id</parameter>
   </methodparam>
  </methodsynopsis>

  <itemizedlist>
  <listitem><para>
   This only works if <link linkend="variable.caching">
    <parameter>$caching</parameter></link> is set to one of <literal>Smarty::CACHING_LIFETIME_CURRENT</literal> or <literal>Smarty::CACHING_LIFETIME_SAVED</literal> to enable caching. See the
   <link linkend="caching">caching section</link> for more info.
  </para></listitem>
    <listitem><para>
   You can also pass a <parameter>$cache_id</parameter> as an optional second
   parameter in case you want
   <link linkend="caching.multiple.caches">multiple caches</link>
   for the given template.
  </para></listitem>

  <listitem><para>
   You can supply a
   <link linkend="variable.compile.id"><parameter>$compile id</parameter></link>
   as an optional third parameter. If you omit that parameter the persistent
   <link linkend="variable.compile.id">
   <parameter>$compile_id</parameter></link> is used if its set.
  </para></listitem>

  <listitem><para>
   If you do not want to pass a <parameter>$cache_id</parameter> but want to
   pass a <link linkend="variable.compile.id">
   <parameter>$compile_id</parameter></link> you have to pass
   &null; as a <parameter>$cache_id</parameter>.
  </para></listitem>
  </itemizedlist>

  <note>
  <title>Technical Note</title>
  <para>
   If <varname>isCached()</varname> returns &true; it actually loads the
   cached output and stores it internally. Any subsequent call to
   <link linkend="api.display"><varname>display()</varname></link> or
   <link linkend="api.fetch"><varname>fetch()</varname></link>
   will return this internally stored output and does not try to reload
   the cache file. This prevents a race condition that may occur when a
   second process clears the cache between the calls to
   <varname>isCached()</varname> and to
   <link linkend="api.display"><varname>display()</varname></link>
   in the example above. This also means calls to
   <link linkend="api.clear.cache"><varname>clearCache()</varname></link>
   and other changes of the cache-settings may have no effect after
   <varname>isCached()</varname> returned &true;.
  </para>
  </note>

  <example>
   <title>isCached()</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

if(!$smarty->isCached('index.tpl')) {
// do database calls, assign vars here
}

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>isCached() with multiple-cache template</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

if(!$smarty->isCached('index.tpl', 'FrontPage')) {
  // do database calls, assign vars here
}

$smarty->display('index.tpl', 'FrontPage');
?>
]]>
   </programlisting>
  </example>


    <para>
    See also
    <link linkend="api.clear.cache"><varname>clearCache()</varname></link>,
    <link linkend="api.clear.all.cache"><varname>clearAllCache()</varname></link>,
    and
    <link linkend="caching">caching section</link>.
  </para>

 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

