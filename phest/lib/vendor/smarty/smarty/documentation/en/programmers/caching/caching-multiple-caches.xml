<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3839 $ -->
   <sect1 id="caching.multiple.caches">
    <title>Multiple Caches Per Page</title>
    <para>
     You can have multiple cache files for a single call to
     <link linkend="api.display"><varname>display()</varname></link>
     or <link linkend="api.fetch"><varname>fetch()</varname></link>.
     Let's say that a call to <literal>display('index.tpl')</literal> may have
     several different output contents depending on some condition, and you want
     separate caches for each one. You can do this by passing a
     <parameter>$cache_id</parameter> as the second parameter to the
     function call.
    </para>
    <example>
     <title>Passing a $cache_id to display()</title>
     <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

$my_cache_id = $_GET['article_id'];

$smarty->display('index.tpl', $my_cache_id);
?>
]]>
     </programlisting>
    </example>
    <para>
     Above, we are passing the variable <literal>$my_cache_id</literal> to
     <link linkend="api.display"><varname>display()</varname></link>
     as the <parameter>$cache_id</parameter>. For each unique value of
     <literal>$my_cache_id</literal>, a separate cache will be
     generated for <filename>index.tpl</filename>. In this example,
     <literal>article_id</literal> was passed in the
     URL and is used as the <parameter>$cache_id</parameter>.
    </para>
    <note>
     <title>Technical Note</title>
     <para>
      Be very cautious when passing values from a client (web browser) into
      Smarty or any PHP application. Although the above example of using the
      article_id from the URL looks handy, it could have bad consequences. The
      <parameter>$cache_id</parameter> is used to create a directory on the file
      system, so if the user
      decided to pass an extremely large value for article_id, or write a script
      that sends random article_id's at a rapid pace, this could possibly cause
      problems at the server level. Be sure to sanitize any data passed in before
      using it. In this instance, maybe you know the article_id has a length of
      ten characters and is made up of alpha-numerics only, and must be a valid
      article_id in the database. Check for this!
     </para>
    </note>
    <para>
     Be sure to pass the same <parameter>$cache_id</parameter> as the
     second parameter to
     <link linkend="api.is.cached"><varname>isCached()</varname></link> and
     <link linkend="api.clear.cache"><varname>clearCache()</varname></link>.
    </para>
    <example>
     <title>Passing a cache_id to isCached()</title>
     <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

$my_cache_id = $_GET['article_id'];

if(!$smarty->isCached('index.tpl',$my_cache_id)) {
    // No cache available, do variable assignments here.
    $contents = get_database_contents();
    $smarty->assign($contents);
}

$smarty->display('index.tpl',$my_cache_id);
?>
]]>
     </programlisting>
    </example>
    <para>
     You can clear all caches for a particular <parameter>$cache_id</parameter>
     by passing &null; as the
     first parameter to
     <link linkend="api.clear.cache"><varname>clearCache()</varname></link>.
    </para>
    <example>
     <title>Clearing all caches for a particular $cache_id</title>
     <programlisting role="php">
<![CDATA[
<?php
require('Smarty.class.php');
$smarty = new Smarty;

$smarty->setCaching(Smarty::CACHING_LIFETIME_CURRENT);

// clear all caches with "sports" as the $cache_id
$smarty->clearCache(null,'sports');

$smarty->display('index.tpl','sports');
?>
]]>
     </programlisting>
    </example>
    <para>
     In this manner, you can <quote>group</quote> your caches together by giving
     them the same <parameter>$cache_id</parameter>.
    </para>

   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
