<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3842 $ -->
<refentry id="api.assign">
 <refnamediv>
  <refname>assign()</refname>
  <refpurpose>assign variables/objects to the templates</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>void</type><methodname>assign</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>void</type><methodname>assign</methodname>
   <methodparam><type>string</type><parameter>varname</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>nocache</parameter></methodparam>
  </methodsynopsis>
  <para>
   You can  explicitly pass name/value pairs, or associative arrays
   containing the name/value pairs.
  </para>
  <para>
   If you pass the optional third <parameter>nocache</parameter> parameter of &true;, the variable is assigned as nocache variable.
   See <link linkend="cacheability.variables"><parameter>Cacheability of Variables</parameter></link> for details.
  </para>
  <note><para>
    When you assign/register objects to templates, be sure that all properties and methods accessed from the template are for presentation purposes only. It is very easy to inject application logic through objects, and this leads to poor designs that are difficult to manage. See the Best Practices section of the Smarty website.
  </para></note>    
  
  <example>    
   <title>assign()</title>
<programlisting role="php">
<![CDATA[
<?php
// passing name/value pairs
$smarty->assign('Name', 'Fred');
$smarty->assign('Address', $address);

// passing an associative array
$smarty->assign(array('city' => 'Lincoln', 'state' => 'Nebraska'));

// passing an array
$myArray = array('no' => 10, 'label' => 'Peanuts');
$smarty->assign('foo',$myArray);

// passing a row from a database (eg adodb)
$sql = 'select id, name, email from contacts where contact ='.$id;
$smarty->assign('contact', $db->getRow($sql));
?>
]]>
</programlisting>
   <para>
   These are accessed in the template with
   </para>
<programlisting>
<![CDATA[
{* note the vars are case sensitive like php *}
{$Name}
{$Address}
{$city}
{$state}

{$foo.no}, {$foo.label}
{$contact.id}, {$contact.name},{$contact.email}
]]>
</programlisting>
  </example>
  <para>
  To access more complex array assignments see
  <link linkend="language.function.foreach"><varname>{foreach}</varname></link>
  and
  <link linkend="language.function.section"><varname>{section}</varname></link>
  </para>

  <para>
 See also
 <link linkend="api.assign.by.ref"><varname>assignByRef()</varname></link>,
 <link linkend="api.get.template.vars"><varname>getTemplateVars()</varname></link>,
 <link linkend="api.clear.assign"><varname>clearAssign()</varname></link>,
 <link linkend="api.append"><varname>append()</varname></link>
 and
 <link linkend="language.function.assign"><varname>{assign}</varname></link>
 </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
