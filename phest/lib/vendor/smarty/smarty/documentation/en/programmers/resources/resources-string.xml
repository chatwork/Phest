<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3827 $ -->
<sect1 id="resources.string">
 <title>String Template Resources</title>
 <para>
  Smarty can render templates from a string by using the <literal>string:</literal> or <literal>eval:</literal> resource. 
 </para>

 <itemizedlist>
  <listitem>
   <para>
    The <literal>string:</literal> resource behaves much the same as a template file. 
    The template source is compiled from a string and stores the compiled template code for later reuse. 
    Each unique template string will create a new compiled template file. 
    If your template strings are accessed frequently, this is a good choice. 
    If you have frequently changing template strings (or strings with low reuse value), 
    the <literal>eval:</literal> resource may be a better choice, as it doesn't save compiled templates to disk.
   </para>
  </listitem>
  <listitem>
   <para>
    The <literal>eval:</literal> resource evaluates the template source every time a page is rendered. This is a good choice
    for strings with low reuse value. If the same string is accessed frequently, the <literal>string:</literal> resource may
    be a better choice.
   </para>
  </listitem>
 </itemizedlist>
 <note>
  <para>
   With a <literal>string:</literal> resource type, each unique string generates a compiled file. Smarty cannot detect a string that has changed,
   and therefore will generate a new compiled file for each unique string. It is important to choose the correct resource so that you do not
   fill your disk space with wasted compiled strings.
  </para>
 </note>
 
 <example>
  <title>Using templates from strings</title>
  <programlisting role="php">
<![CDATA[
<?php
$smarty->assign('foo','value');
$template_string = 'display {$foo} here';
$smarty->display('string:'.$template_string); // compiles for later reuse
$smarty->display('eval:'.$template_string); // compiles every time
?>
]]>
  </programlisting>
  <para>From within a Smarty template</para>
  <programlisting>
<![CDATA[
{include file="string:$template_string"} {* compiles for later reuse *}
{include file="eval:$template_string"} {* compiles every time *}

]]>
  </programlisting>
 </example>
 
 <para>
     Both <literal>string:</literal> and <literal>eval:</literal> resources may be encoded with
     <ulink url="&url.php-manual;urlencode"><varname>urlencode()</varname></ulink> or
     <ulink url="&url.php-manual;urlencode"><varname>base64_encode()</varname></ulink>. This is
     not necessary for the usual use of <literal>string:</literal> and <literal>eval:</literal>,
     but is required when using either of them in conjunction with 
     <link linkend="resources.extends"><varname>Extends Template Resource</varname></link>
 </para>
 
 <example>
   <title>Using templates from encoded strings</title>
   <programlisting role="php">
 <![CDATA[
 <?php
 $smarty->assign('foo','value');
 $template_string_urlencode = urlencode('display {$foo} here');
 $template_string_base64 = base64_encode('display {$foo} here');
 $smarty->display('eval:urlencode:'.$template_string_urlencode); // will decode string using urldecode()
 $smarty->display('eval:base64:'.$template_string_base64); // will decode string using base64_decode()
 ?>
 ]]>
   </programlisting>
   <para>From within a Smarty template</para>
   <programlisting>
 <![CDATA[
 {include file="string:urlencode:$template_string_urlencode"} {* will decode string using urldecode() *}
 {include file="eval:base64:$template_string_base64"} {* will decode string using base64_decode() *}

 ]]>
   </programlisting>
  </example>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
