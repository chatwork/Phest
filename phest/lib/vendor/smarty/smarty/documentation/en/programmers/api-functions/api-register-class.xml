<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3827 $ -->
<refentry id="api.register.class">
 <refnamediv>
  <refname>registerClass()</refname>
  <refpurpose>register a class for use in the templates</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>void</type><methodname>registerClass</methodname>
   <methodparam><type>string</type><parameter>class_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>class_impl</parameter></methodparam>
  </methodsynopsis>

  <para>
   Smarty allows you to access static classes from templates as long as the 
   <link linkend="advanced.features.security">Security Policy</link> does not
   tell it otherwise. If security is enabled, classes registered with 
   <varname>registerClass()</varname> are accessible to templates.
  </para>
  
  <example>
   <title>Register class for use within a template</title>
   <programlisting>
<![CDATA[
<?php

class Bar {
  $property = "hello world";
}

$smarty = new Smarty();
$smarty->registerClass("Foo", "Bar");
]]>
   </programlisting>
   <programlisting>
<![CDATA[
{* Smarty will access this class as long as it's not prohibited by security *}
{Bar::$property}
{* Foo translates to the real class Bar *}
{Foo::$property}
]]>
   </programlisting>
  </example>
   
  <example>
   <title>Register namespaced class for use within a template</title>
   <programlisting>
<![CDATA[
<?php
namespace my\php\application {
  class Bar {
    $property = "hello world";
  }
}

$smarty = new Smarty();
$smarty->registerClass("Foo", "\my\php\application\Bar");
]]>
   </programlisting>
   <programlisting>
<![CDATA[
{* Foo translates to the real class \my\php\application\Bar *}
{Foo::$property}
]]>
   </programlisting>
  </example>
  <para>
   See also
   <link linkend="api.register.object"><varname>registerObject()</varname></link>,
   and
   <link linkend="advanced.features.security">Security</link>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

