<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3827 $ -->
<sect1 id="language.function.cycle">
 <title>{cycle}</title>
  <para>
   <varname>{cycle}</varname> is used to alternate a set of values.
   This makes it easy to for example, alternate between two or more colors
   in a table, or cycle through an array of values.
 </para>

 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribute Name</entry>
     <entry>Type</entry>
     <entry>Required</entry>
     <entry>Default</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>name</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>default</emphasis></entry>
     <entry>The name of the cycle</entry>
    </row>
    <row>
     <entry>values</entry>
     <entry>mixed</entry>
     <entry>Yes</entry>
     <entry><emphasis>N/A</emphasis></entry>
     <entry>The values to cycle through, either a comma
      delimited list (see delimiter attribute), or an array
      of values</entry>
    </row>
    <row>
     <entry>print</entry>
     <entry>boolean</entry>
     <entry>No</entry>
     <entry><emphasis>&true;</emphasis></entry>
     <entry>Whether to print the value or not</entry>
    </row>
    <row>
     <entry>advance</entry>
     <entry>boolean</entry>
     <entry>No</entry>
     <entry><emphasis>&true;</emphasis></entry>
     <entry>Whether or not to advance to the next value</entry>
    </row>
    <row>
     <entry>delimiter</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>,</emphasis></entry>
     <entry>The delimiter to use in the values attribute</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The template variable the output will be assigned
      to</entry>
    </row>
    <row>
     <entry>reset</entry>
     <entry>boolean</entry>
     <entry>No</entry>
     <entry><emphasis>&false;</emphasis></entry>
     <entry>The cycle will be set to the first value and not advanced</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

<itemizedlist>
 <listitem><para>
  You can <varname>{cycle}</varname> through more than one set of values in
  a template by supplying a <parameter>name</parameter> attribute.
  Give each <varname>{cycle}</varname> an unique <parameter>name</parameter>.
 </para></listitem>
 <listitem><para>
  You can force the current value not to print with the
  <parameter>print</parameter>  attribute set to &false;. This would be useful
  for silently skipping a value.
 </para></listitem>
 <listitem><para>
  The <parameter>advance</parameter> attribute is used to repeat a value.
  When set to &false;, the next call to <varname>{cycle}</varname> will print
  the same value.
 </para></listitem>
 <listitem><para>
  If you supply the <parameter>assign</parameter> attribute, the output of the
  <varname>{cycle}</varname> function will be assigned to a template variable
  instead of being output to the template.
 </para></listitem>
</itemizedlist>

 <example>
  <title>{cycle}</title>
  <programlisting>
<![CDATA[
{section name=rows loop=$data}
<tr class="{cycle values="odd,even"}">
   <td>{$data[rows]}</td>
</tr>
{/section}
]]>
  </programlisting>
  <para>The above template would output:</para>
  <screen>
<![CDATA[
<tr class="odd">
   <td>1</td>
</tr>
<tr class="even">
   <td>2</td>
</tr>
<tr class="odd">
   <td>3</td>
</tr>
]]>
  </screen>
 </example>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
