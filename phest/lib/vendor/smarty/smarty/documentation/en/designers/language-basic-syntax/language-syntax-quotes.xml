<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4020 $ -->
<sect1 id="language.syntax.quotes">
 <title>Embedding Vars in Double Quotes</title>

 <itemizedlist>
  <listitem>
 <para>
  Smarty will recognize <link
  linkend="api.assign">assigned</link>
  <link   linkend="language.syntax.variables">variables</link>
  embedded in "double quotes" so long as the variable name contains only numbers,
  letters and under_scores.
  See <ulink url="&url.php-manual;language.variables">naming</ulink>
  for more detail.
  </para></listitem>

  <listitem><para>
  With any other characters, for example a period(.) or
  <literal>$object->reference</literal>, then the variable must be
  surrounded by  <literal>`backticks`</literal>.
  </para></listitem>

  <listitem><para>
  In addition Smarty3 does allow embedded Smarty tags in double quoted strings.
  This is useful if you want to include variables with modifiers, plugin or PHP function results.
  </para></listitem>
 </itemizedlist>

 <example>
  <title>Syntax examples</title>
  <programlisting>
<![CDATA[
{func var="test $foo test"}              // sees $foo
{func var="test $foo_bar test"}          // sees $foo_bar
{func var="test `$foo[0]` test"}         // sees $foo[0]
{func var="test `$foo[bar]` test"}       // sees $foo[bar]
{func var="test $foo.bar test"}          // sees $foo (not $foo.bar)
{func var="test `$foo.bar` test"}        // sees $foo.bar
{func var="test `$foo.bar` test"|escape} // modifiers outside quotes!
{func var="test {$foo|escape} test"}     // modifiers inside quotes!
{func var="test {time()} test"}          // PHP function result
{func var="test {counter} test"}         // plugin result
{func var="variable foo is {if !$foo}not {/if} defined"} // Smarty block function
]]>
  </programlisting>
</example>

 <example>
  <title>Examples</title>
  <programlisting>
<![CDATA[
{* will replace $tpl_name with value *}
{include file="subdir/$tpl_name.tpl"}

{* does NOT replace $tpl_name *}
{include file='subdir/$tpl_name.tpl'} // vars require double quotes!

{* must have backticks as it contains a dot "." *}
{cycle values="one,two,`$smarty.config.myval`"}

{* must have backticks as it contains a dot "." *}
{include file="`$module.contact`.tpl"}

{* can use variable with dot syntax *}
{include file="`$module.$view`.tpl"}
]]>
  </programlisting>
 </example>

 <note><para>
    Although Smarty can handle some very complex expressions and syntax, it is a good rule of
    thumb to keep the template syntax minimal and focused on presentation. If you find your
    template syntax getting too complex, it may be a good idea to move the bits that do not
    deal explicitly with presentation to PHP by way of plugins or modifiers.
 </para></note>

 <para>
  See also <link linkend="language.modifier.escape"><varname>escape</varname></link>.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
