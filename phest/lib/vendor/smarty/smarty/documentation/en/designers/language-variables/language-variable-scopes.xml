<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3827 $ -->
  <sect1 id="language.variable.scopes">
  <title>Variable scopes</title>
   <para>
    You have the choice to assign variables to the scope of the main Smarty object, 
    data objects created with <link linkend="api.create.data"><varname>createData()</varname></link>,
    and template objects created with <link linkend="api.create.template"><varname>createTemplate()</varname></link>. 
    These objects can be chained. A template sees all the variables of its own object and all variables assigned 
    to the objects in its chain of parent objects. 
   </para>
   <para>
    By default templates which are rendered by <link linkend="api.display"><varname>$smarty->display(...)</varname></link>
    or <link linkend="api.fetch"><varname>$smarty->fetch(...)</varname></link> calls are automatically linked to the
    Smarty object variable scope.
   </para>
   <para>
    By assigning variables to individual data or template objects you have full control which variables can be seen
    by a template.
   </para>
   <para>
    <example>
     <title>Variable scope examples</title>
     <programlisting role="php">
<![CDATA[

// assign variable to Smarty object scope
$smarty->assign('foo','smarty');

// assign variables to data object scope
$data = $smarty->createData();
$data->assign('foo','data');
$data->assign('bar','bar-data');

// assign variables to other data object scope
$data2 = $smarty->createData($data);
$data2->assign('bar','bar-data2');

// assign variable to template object scope
$tpl = $smarty->createTemplate('index.tpl');
$tpl->assign('bar','bar-template');

// assign variable to template object scope with link to Smarty object
$tpl2 = $smarty->createTemplate('index.tpl',$smarty);
$tpl2->assign('bar','bar-template2');

// This display() does see $foo='smarty' from the $smarty object
$smarty->display('index.tpl');

// This display() does see $foo='data' and $bar='bar-data' from the data object $data
$smarty->display('index.tpl',$data);

// This display() does see $foo='data' from the data object $data 
// and $bar='bar-data2' from the data object $data2
$smarty->display('index.tpl',$data2);

// This display() does see $bar='bar-template' from the template object $tpl
$tpl->display();  // or $smarty->display($tpl);

// This display() does see $bar='bar-template2' from the template object $tpl2
// and $foo='smarty' form the Smarty object $foo
$tpl2->display();  // or $smarty->display($tpl2);
]]>
    </programlisting>
    </example>
   </para>
   <para>
    See also <link linkend="api.assign"><varname>assign()</varname></link>,
    <link linkend="api.create.data"><varname>createData()</varname></link> and
    <link linkend="api.create.template"><varname>createTemplate()</varname></link>.
</para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
