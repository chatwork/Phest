<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3827 $ -->
<sect1 id="language.function.literal">
 <title>{literal}</title>
 <para>
  <varname>{literal}</varname> tags allow a block of data to be taken literally. This is typically
  used around Javascript or stylesheet blocks where {curly braces} would
  interfere with the template <link linkend="variable.left.delimiter">delimiter</link> syntax. Anything within
  <varname>{literal}{/literal}</varname> tags is not interpreted, but displayed as-is.
  If you  need template tags embedded in a <varname>{literal}</varname> block, consider using
  <link linkend="language.function.ldelim"><varname>{ldelim}{rdelim}</varname></link> to escape the
  individual delimiters instead.
 </para>

 <note><para>
   <varname>{literal}{/literal}</varname> tags are normally not necessary, as Smarty ignores delimiters that are surrounded by whitespace.
   Be sure your javascript and CSS curly braces are surrounded by whitespace. This is new behavior to Smarty 3.
 </para></note>

 <example>
  <title>{literal} tags</title>
  <programlisting>
<![CDATA[
<script>
   // the following braces are ignored by Smarty
   // since they are surrounded by whitespace
   function myFoo {
     alert('Foo!');
   }
   // this one will need literal escapement
   {literal}
     function myBar {alert('Bar!');}
   {/literal}
</script>
]]>
  </programlisting>
 </example>

 <para>
  See also
  <link linkend="language.function.ldelim"><varname>{ldelim} {rdelim}</varname></link>
  and the
  <link linkend="language.escaping">escaping Smarty parsing</link> page.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
