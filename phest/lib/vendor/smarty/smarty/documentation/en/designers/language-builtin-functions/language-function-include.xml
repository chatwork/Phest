<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4665 $ -->
<sect1 id="language.function.include">
 <title>{include}</title>
 <para>
  <varname>{include}</varname> tags are used for including other templates in the current
  template. Any variables available in the current template are also
  available within the included template.
  </para>

  <itemizedlist>
  <listitem><para>
  The <varname>{include}</varname> tag must have
  the  <parameter>file</parameter> attribute
  which contains the template resource path.
  </para></listitem>

 <listitem><para>
  Setting the optional <parameter>assign</parameter> attribute
   specifies the template variable that the output of
  <varname>{include}</varname> is assigned to, instead of being displayed. Similar to
  <link linkend="language.function.assign"><varname>{assign}</varname></link>.
 </para></listitem>

 <listitem><para>
  Variables can be passed to included templates as
  <link linkend="language.syntax.attributes">attributes</link>.
  Any variables explicitly passed to an included template
   are only available within the scope of the included
  file. Attribute variables override current template variables, in
  the case when they are named the same.
 </para></listitem>

 <listitem><para>
  You can use all variables from the including template inside the included template. 
  But changes to variables or new created variables inside the included template
  have local scope and are not visible inside the including template after the 
  <varname>{include}</varname> statement. This default behaviour can be changed for 
  all variables assigned in the included template by using the scope attribute at the
  <varname>{include}</varname> statement or for individual variables by using the scope
   attribute at the <link linkend="language.function.assign"><varname>{assign}</varname></link>
   statement. The later is useful to return values from the included template to the 
   including template.
  </para></listitem>

  <listitem><para>
  Use the syntax for <link
  linkend="resources">template resources</link> to
  <varname>{include}</varname> files outside of the
  <link linkend="variable.template.dir"><parameter>$template_dir</parameter></link>  directory.
  </para></listitem>
 </itemizedlist>

<para><emphasis role="bold">Attributes:</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
  <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribute Name</entry>
    <entry>Type</entry>
     <entry>Required</entry>
     <entry>Default</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>file</entry>
     <entry>string</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The name of the template file to include</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The name of the variable that the output of
      include will be assigned to</entry>
    </row>
    <row>
     <entry>cache_lifetime</entry>
     <entry>integer</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Enable caching of this subtemplate with an individual cache lifetime</entry>
    </row>
    <row>
     <entry>compile_id</entry>
     <entry>string/integer</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Compile this subtemplate with an individual compile_id</entry>
    </row>
    <row>
     <entry>cache_id</entry>
     <entry>string/integer</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Enable caching of this subtemplate with an individual cache_id</entry>
    </row>
    <row>
     <entry>scope</entry>
    <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Define the scope of all in the subtemplate assigned variables: 'parent','root' or 'global'</entry> 
    </row>
    <row>
     <entry>[var ...]</entry>
     <entry>[var type]</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>variable to pass local to template</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
 <para><emphasis role="bold">Option Flags:</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="2">
   <colspec colname="param" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Name</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>nocache</entry>
     <entry>Disables caching of this subtemplate</entry>
    </row>
    <row>
     <entry>caching</entry>
     <entry>Enable caching of this subtemplate</entry>
    </row>
    <row>
     <entry>inline</entry>
     <entry>If set merge the compile code of the subtemplate into the compiled calling template</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
 <example>
  <title>Simple {include} example</title>
  <programlisting>
<![CDATA[
<html>
<head>
  <title>{$title}</title>
</head>
<body>
{include file='page_header.tpl'}

{* body of template goes here, the $tpl_name variable
   is replaced with a value eg 'contact.tpl'
*}
{include file="$tpl_name.tpl"}

{* using shortform file attribute *}
{include 'page_footer.tpl'}
</body>
</html>
]]>
  </programlisting>
 </example>

 <example>
  <title>{include} passing variables</title>
  <programlisting>
<![CDATA[
{include 'links.tpl' title='Newest links' links=$link_array}
{* body of template goes here *}
{include 'footer.tpl' foo='bar'}
]]>
  </programlisting>
  <para>The template above includes the example <filename>links.tpl</filename> below</para>
  <programlisting>
<![CDATA[
<div id="box">
<h3>{$title}{/h3>
<ul>
{foreach from=$links item=l}
.. do stuff  ...
</foreach}
</ul>
</div>
]]>
</programlisting>
 </example>
 
 <example>
  <title>{include} using parent scope</title>
  <para>Variables assigned in the included template will be seen in the including template.</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' scope=parent}
...
{* display variables assigned in sub_template *}
{$foo}<br>
{$bar}<br>
...
]]>
  </programlisting>
  <para>The template above includes the example <filename>sub_template.tpl</filename> below</para>
  <programlisting>
<![CDATA[
...
{assign var=foo value='something'}
{assign var=bar value='value'}
...
]]>
</programlisting>
 </example>
 
 <example>
  <title>{include} with disabled caching</title>
  <para>The included template will not be cached.</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' nocache}
...
]]>
  </programlisting>
 </example>
 
 <example>
  <title>{include} with individual cache lifetime</title>
  <para>In this example included template will be cached with an individual cache lifetime of 500 seconds.</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' cache_lifetime=500}
...
]]>
  </programlisting>
 </example>
 
 <example>
  <title>{include} with forced caching</title>
  <para>In this example included template will be cached independent of the global cahing setting.</para>
  <programlisting>
<![CDATA[
{include 'sub_template.tpl' caching}
...
]]>
  </programlisting>
 </example>
 
 
  <example>
   <title>{include} and assign to variable</title>
   <para>This example assigns the contents of <filename>nav.tpl</filename>
    to the <varname>$navbar</varname> variable,
   which is then output at both the top and bottom of the page.
   </para>
   <programlisting>
 <![CDATA[
<body>
  {include 'nav.tpl' assign=navbar}
  {include 'header.tpl' title='Smarty is cool'}
    {$navbar}
    {* body of template goes here *}
    {$navbar}
  {include 'footer.tpl'}
</body>
]]>
   </programlisting>
 </example>
 
 <example>
    <title>{include} with relative paths</title>
    <para>This example includes another template relative to the directory of the current template.</para>
    <programlisting>
<![CDATA[
   {include 'template-in-a-template_dir-directory.tpl'}
   {include './template-in-same-directory.tpl'}
   {include '../template-in-parent-directory.tpl'}
]]>
    </programlisting>
  </example>

 <example>
  <title>Various {include} resource examples</title>
  <programlisting>
<![CDATA[
{* absolute filepath *}
{include file='/usr/local/include/templates/header.tpl'}

{* absolute filepath (same thing) *}
{include file='file:/usr/local/include/templates/header.tpl'}

{* windows absolute filepath (MUST use "file:" prefix) *}
{include file='file:C:/www/pub/templates/header.tpl'}

{* include from template resource named "db" *}
{include file='db:header.tpl'}

{* include a $variable template - eg $module = 'contacts' *}
{include file="$module.tpl"}

{* wont work as its single quotes ie no variable substitution *}
{include file='$module.tpl'}

{* include a multi $variable template - eg amber/links.view.tpl *}
{include file="$style_dir/$module.$view.tpl"}
]]>
  </programlisting>
 </example>
 <para>
  See also
  <link linkend="language.function.include.php"><varname>{include_php}</varname></link>,
  <link linkend="language.function.insert"><varname>{insert}</varname></link>,
  <link linkend="language.function.php"><varname>{php}</varname></link>,
  <link linkend="resources">template resources</link> and
  <link linkend="tips.componentized.templates">componentized templates</link>.
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

