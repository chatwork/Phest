<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4562 $ -->
<sect1 id="language.variables.smarty">
 <title>{$smarty} reserved variable</title>
 <para>
  The PHP reserved <parameter>{$smarty}</parameter> variable can be used to
  access several environment and request variables.
  The full list of them follows.
 </para>

 <sect2 id="language.variables.smarty.request">
  <title>Request variables</title>
  <para>
   The <ulink url="&url.php-manual;reserved.variables">request variables
   </ulink> such as <literal>$_GET</literal>, <literal>$_POST</literal>,
   <literal>$_COOKIE</literal>, <literal>$_SERVER</literal>,
   <literal>$_ENV</literal> and <literal>$_SESSION</literal>
   can be accessed as demonstrated in the examples below:
  </para>
  <example>
   <title>Displaying request variables</title>
   <programlisting>
<![CDATA[
{* display value of page from URL ($_GET) http://www.example.com/index.php?page=foo *}
{$smarty.get.page}

{* display the variable "page" from a form ($_POST['page']) *}
{$smarty.post.page}

{* display the value of the cookie "username" ($_COOKIE['username']) *}
{$smarty.cookies.username}

{* display the server variable "SERVER_NAME" ($_SERVER['SERVER_NAME'])*}
{$smarty.server.SERVER_NAME}

{* display the system environment variable "PATH" *}
{$smarty.env.PATH}

{* display the php session variable "id" ($_SESSION['id']) *}
{$smarty.session.id}

{* display the variable "username" from merged get/post/cookies/server/env *}
{$smarty.request.username}
]]>
   </programlisting>
  </example>
  <note>
   <para>
    For historical reasons <parameter>{$SCRIPT_NAME}</parameter> is
    short-hand for <parameter>{$smarty.server.SCRIPT_NAME}</parameter>.
   </para>
<programlisting>
<![CDATA[
<a href="{$SCRIPT_NAME}?page=smarty">click me</a>
<a href="{$smarty.server.SCRIPT_NAME}?page=smarty">click me</a>
]]>
</programlisting>
  </note>
  <note><para>
    Although Smarty provides direct access to PHP super globals for convenience, it should be used with caution. Directly accessing super globals mixes underlying application code structure with templates. A good practice is to assign specific needed values to template vars.
  </para></note>
 </sect2>

 <sect2 id="language.variables.smarty.now">
  <title>{$smarty.now}</title>
  <para>
   The current <ulink url="&url.php-manual;function.time">timestamp</ulink>
   can be accessed with <parameter>{$smarty.now}</parameter>.
   The  value reflects the number of
   seconds passed since the so-called Epoch on January 1, 1970,
   and can be passed directly to the
   <link linkend="language.modifier.date.format"><varname>date_format</varname>
   </link> modifier for display. Note that
   <ulink url="&url.php-manual;function.time"><varname>time()</varname></ulink>
    is called on each invocation; eg a script that takes three seconds to execute
    with a call to <parameter>$smarty.now</parameter> at start and end
    will show the three second difference.
  <informalexample>
   <programlisting>
<![CDATA[
{* use the date_format modifier to show current date and time *}
{$smarty.now|date_format:'%Y-%m-%d %H:%M:%S'}
]]>
   </programlisting>
  </informalexample>
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.const">
  <title>{$smarty.const}</title>
  <para>
   You can access PHP constant values directly. See also <link
   linkend="smarty.constants">smarty constants</link>.
   </para>
  <informalexample>
<programlisting role="php">
<![CDATA[
<?php
// the constant defined in php
define('MY_CONST_VAL','CHERRIES');
?>
]]>
</programlisting>
</informalexample>

<para>Output the constant in a template with</para>
<informalexample>
<programlisting>
<![CDATA[
{$smarty.const.MY_CONST_VAL}
]]>
</programlisting>
</informalexample>

<note><para>
  Although Smarty provides direct access to PHP constants for convenience,
  it is typically avoided as this is mixing underlying application
  code structure into the templates.
  A good practice is to assign specific needed values to template vars.  
</para></note>

 </sect2>

 <sect2 id="language.variables.smarty.capture">
  <title>{$smarty.capture}</title>
  <para>
   Template output captured via the built-in
   <link linkend="language.function.capture">
   <varname>{capture}..{/capture}</varname></link> function can be accessed
   using the <parameter>{$smarty.capture}</parameter> variable.
    See the <link linkend="language.function.capture">
    <varname>{capture}</varname></link> page for more information.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.config">
  <title>{$smarty.config}</title>
  <para>
   <parameter>{$smarty.config}</parameter> variable can be used to refer
   to loaded <link linkend="language.config.variables">config variables</link>.
   <parameter>{$smarty.config.foo}</parameter> is a synonym for
   <parameter>{#foo#}</parameter>. See the
   <link linkend="language.function.config.load">{config_load}</link> page
   for more info.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.loops">
  <title>{$smarty.section}</title>
  <para>
   The <parameter>{$smarty.section}</parameter> variables can be used to refer to
   <link linkend="language.function.section"><varname>{section}</varname></link>
   loop properties. These have some very useful values such as
   <varname>.first</varname>, <varname>.index</varname>, etc.
  </para>
  <note><para>
    The <varname>{$smarty.foreach}</varname> variable is no longer used with the new <link linkend="language.function.foreach"><varname>{foreach}</varname></link> syntax,
    but is still supported with Smarty 2.x style foreach syntax.
  </para></note>
 </sect2>

 <sect2 id="language.variables.smarty.template">
  <title>{$smarty.template}</title>
  <para>
   Returns the name of the current template being  processed (without the directory).
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.template_object">
  <title>{$smarty.template_object}</title>
  <para>
   Returns the template object of the current template being  processed.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.current_dir">
   <title>{$smarty.current_dir}</title>
   <para>
    Returns the name of the directory for the current template being processed.
   </para>
  </sect2>

 <sect2 id="language.variables.smarty.version">
  <title>{$smarty.version}</title>
  <para>
   Returns the version of Smarty the template was compiled with.
  </para>
<programlisting>
<![CDATA[
<div id="footer">Powered by Smarty {$smarty.version}</div>
]]>
</programlisting>
 </sect2>

 <sect2 id="language.variables.smarty.block.child">
  <title>{$smarty.block.child}</title>
  <para>
   Returns block text from child template.
   See <link linkend="advanced.features.template.inheritance">Template interitance</link>.
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.block.parent">
  <title>{$smarty.block.parent}</title>
  <para>
   Returns block text from parent template.
   See <link linkend="advanced.features.template.inheritance">Template interitance</link>
  </para>
 </sect2>

 <sect2 id="language.variables.smarty.ldelim">
  <title>{$smarty.ldelim}, {$smarty.rdelim}</title>
  <para>
   These variables are used for printing the left-delimiter and right-delimiter
   value literally, the same as <link linkend="language.function.ldelim">
   <varname>{ldelim},{rdelim}</varname></link>.
  </para>
  <para>
   See also
   <link linkend="language.assigned.variables">assigned variables</link> and
   <link linkend="language.config.variables">config variables</link>
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
