<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4278 $ -->
<sect1 id="language.function.eval">
 <title>{eval}</title>
  <para>
   <varname>{eval}</varname> is used to evaluate a variable as a template.
   This can be used  for things like embedding template tags/variables into
   variables or  tags/variables into config file variables.
  </para>
  <para>
   If you supply the <parameter>assign</parameter> attribute, the output of the
   <varname>{eval}</varname> function will be assigned to this template
    variable instead of  being output to the template.
 </para>

 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribute Name</entry>
     <entry>Type</entry>
     <entry>Required</entry>
     <entry>Default</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>var</entry>
     <entry>mixed</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Variable (or string) to evaluate</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The template variable the output will be assigned
      to</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <note>
  <title>Technical Note</title>
  <para>
  <itemizedlist>
  <listitem><para>
   Evaluated variables are treated the same as templates. They follow
   the same escapement and security features just as if they were
   templates.
  </para></listitem>

  <listitem><para>
   Evaluated variables are compiled on every invocation, the compiled
   versions are not saved! However if you have
   <link linkend="caching">caching</link>   enabled, the
   output will be cached with the rest of the template.
  </para></listitem>
  <listitem><para>
   If the content to evaluate doesn't change often, or is used repeatedly,
   consider using <literal>{include file="string:{$template_code}"}</literal> instead.
   This may cache the compiled state and thus doesn't have to run the (comparably slow) 
   compiler on every invocation.
  </para></listitem>
  </itemizedlist>
  </para>
 </note>

 <example>
  <title>{eval}</title>
<para>The contents of the config file, <filename>setup.conf</filename>.</para>
  <programlisting>
<![CDATA[
emphstart = <strong>
emphend = </strong>
title = Welcome to {$company}'s home page!
ErrorCity = You must supply a {#emphstart#}city{#emphend#}.
ErrorState = You must supply a {#emphstart#}state{#emphend#}.
]]>
  </programlisting>
  <para>
   Where the template is:
  </para>
  <programlisting>
<![CDATA[
{config_load file='setup.conf'}

{eval var=$foo}
{eval var=#title#}
{eval var=#ErrorCity#}
{eval var=#ErrorState# assign='state_error'}
{$state_error}
]]>
  </programlisting>
  <para>
   The above template will output:
  </para>
  <screen>
<![CDATA[
This is the contents of foo.
Welcome to Foobar Pub & Grill's home page!
You must supply a <strong>city</strong>.
You must supply a <strong>state</strong>.
]]>
  </screen>
 </example>

  <example>
   <title>Another {eval} example</title>
   <para>This outputs the server name (in uppercase)  and IP. The assigned
   variable <parameter>$str</parameter> could be from a database query.</para>
   <programlisting role="php">
 <![CDATA[
<?php
$str = 'The server name is {$smarty.server.SERVER_NAME|upper} '
       .'at {$smarty.server.SERVER_ADDR}';
$smarty->assign('foo',$str);
?>
 ]]>
   </programlisting>
   <para>
    Where the template is:
   </para>
   <programlisting>
 <![CDATA[
    {eval var=$foo}
 ]]>
   </programlisting>
 </example>


</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->