<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4020 $ -->
<sect1 id="language.function.while">
 <title>{while}</title>
 <para>
  <varname>{while}</varname> loops in Smarty have much the same flexibility as PHP
  <ulink url="&url.php-manual;while">while</ulink>
  statements, with a few added features for the template engine.
  Every <varname>{while}</varname> must be paired with a matching
  <varname>{/while}</varname>.  All PHP conditionals and functions
  are recognized, such as <emphasis>||</emphasis>, <emphasis>or</emphasis>,
  <emphasis>&amp;&amp;</emphasis>, <emphasis>and</emphasis>,
  <emphasis>is_array()</emphasis>, etc.
 </para>
  <para>
  The following is a list of recognized qualifiers, which must be
  separated from surrounding elements by spaces. Note that items listed
  in [brackets] are optional. PHP equivalents are shown where applicable.
  </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="qualifier" align="center" />
   <colspec colname="alternates" align="center" />
   <colspec colname="meaning" />
   <colspec colname="example" />
   <colspec colname="php" />
   <thead>
    <row>
     <entry>Qualifier</entry>
     <entry>Alternates</entry>
     <entry>Syntax Example</entry>
     <entry>Meaning</entry>
     <entry>PHP Equivalent</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>==</entry>
     <entry>eq</entry>
     <entry>$a eq $b</entry>
     <entry>equals</entry>
     <entry>==</entry>
    </row>
    <row>
     <entry>!=</entry>
     <entry>ne, neq</entry>
     <entry>$a neq $b</entry>
     <entry>not equals</entry>
     <entry>!=</entry>
    </row>
    <row>
     <entry>&gt;</entry>
     <entry>gt</entry>
     <entry>$a gt $b</entry>
     <entry>greater than</entry>
     <entry>&gt;</entry>
    </row>
    <row>
     <entry>&lt;</entry>
     <entry>lt</entry>
     <entry>$a lt $b</entry>
     <entry>less than</entry>
     <entry>&lt;</entry>
    </row>
    <row>
     <entry>&gt;=</entry>
     <entry>gte, ge</entry>
     <entry>$a ge $b</entry>
     <entry>greater than or equal</entry>
     <entry>&gt;=</entry>
    </row>
    <row>
     <entry>&lt;=</entry>
     <entry>lte, le</entry>
     <entry>$a le $b</entry>
     <entry>less than or equal</entry>
     <entry>&lt;=</entry>
    </row>
    <row>
     <entry>===</entry>
     <entry></entry>
     <entry>$a === 0</entry>
     <entry>check for identity</entry>
     <entry>===</entry>
    </row>
    <row>
     <entry>!</entry>
     <entry>not</entry>
     <entry>not $a</entry>
     <entry>negation (unary)</entry>
     <entry>!</entry>
    </row>
    <row>
     <entry>%</entry>
     <entry>mod</entry>
     <entry>$a mod $b</entry>
     <entry>modulous</entry>
     <entry>%</entry>
    </row>
    <row>
     <entry>is [not] div by</entry>
     <entry></entry>
     <entry>$a is not div by 4</entry>
     <entry>divisible by</entry>
     <entry>$a % $b == 0</entry>
    </row>
    <row>
     <entry>is [not] even</entry>
     <entry></entry>
     <entry>$a is not even</entry>
     <entry>[not] an even number (unary)</entry>
     <entry>$a % 2 == 0</entry>
    </row>
    <row>
     <entry>is [not] even by</entry>
     <entry></entry>
     <entry>$a is not even by $b</entry>
     <entry>grouping level [not] even</entry>
     <entry>($a / $b) % 2 == 0</entry>
    </row>
    <row>
     <entry>is [not] odd</entry>
     <entry></entry>
     <entry>$a is not odd</entry>
     <entry>[not] an odd number (unary)</entry>
     <entry>$a % 2 != 0</entry>
    </row>
    <row>
     <entry>is [not] odd by</entry>
     <entry></entry>
     <entry>$a is not odd by $b</entry>
     <entry>[not] an odd grouping</entry>
     <entry>($a / $b) % 2 != 0</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <example>
  <title>{while} loop</title>
  <programlisting>
<![CDATA[

{while $foo > 0}
  {$foo--}
{/while}
]]>
  </programlisting>
 <para>
 The above example will count down the value of $foo until 1 is reached. 
 </para>
 </example>

 <para>
  See also <link linkend="language.function.foreach"><varname>{foreach}</varname></link>,
  <link linkend="language.function.for"><varname>{for}</varname></link>
  and
  <link linkend="language.function.section"><varname>{section}</varname></link>.
 </para>

</sect1>
<!-- Keep this comment at the end of the file
     Local variables:
     mode: sgml
     sgml-omittag:t
     sgml-shorttag:t
     sgml-minimize-attributes:nil
     sgml-always-quote-attributes:t
     sgml-indent-step:1
     sgml-indent-data:t
     indent-tabs-mode:nil
     sgml-parent-document:nil
     sgml-default-dtd-file:"../../../../manual.ced"
     sgml-exposed-tags:nil
     sgml-local-catalogs:nil
     sgml-local-ecat-files:nil
     End:
     vim600: syn=xml fen fdm=syntax fdl=2 si
     vim: et tw=78 syn=sgml
     vi: ts=1 sw=1
-->
