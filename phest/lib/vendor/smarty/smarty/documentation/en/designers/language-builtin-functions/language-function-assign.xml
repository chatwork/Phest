<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4822 $ -->
<sect1 id="language.function.assign">
 <title>{assign}</title>
  <para>
   <varname>{assign}</varname> is used for assigning template variables
   <emphasis role="bold">during the execution  of a template</emphasis>.
 </para>

 <note><para>
   Assignment of variables in-template is essentially placing application logic into the presentation that may be better handled in PHP. Use at your own discretion.
 </para></note>

 <note><para>
    See also the <link linkend="language.function.shortform.assign"><varname>short-form</varname></link> 
    method of assigning template vars.
 </para></note>

 <para><emphasis role="bold">Attributes:</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribute Name</entry>
     <entry>Type</entry>
     <entry>Required</entry>
     <entry>Default</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
    <entry>var</entry>
    <entry>string</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The name of the variable being assigned</entry>
    </row>
    <row>
     <entry>value</entry>
     <entry>string</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The value being assigned</entry>
    </row>
    <row>
     <entry>scope</entry>
    <entry>string</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The scope of the assigned variable: 'parent','root' or 'global'</entry> 
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <para><emphasis role="bold">Option Flags:</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="2">
   <colspec colname="param" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Name</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>nocache</entry>
     <entry>Assigns the variable with the 'nocache' attribute</entry>
    </row>    
   </tbody>
  </tgroup>
 </informaltable>
 
 <example>
  <title>{assign}</title>
  <programlisting>
<![CDATA[
{assign var="name" value="Bob"}
{assign "name" "Bob"} {* short-hand *}

The value of $name is {$name}.
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
The value of $name is Bob.
]]>
  </screen>
 </example>
 
 <example>
  <title>{assign} as a nocache variable</title>
  <programlisting>
<![CDATA[
{assign var="name" value="Bob" nocache}
{assign "name" "Bob" nocache} {* short-hand *}

The value of $name is {$name}.
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
The value of $name is Bob.
]]>
  </screen>
 </example>
 
 <example>
  <title>{assign} with some maths</title>
  <programlisting>
<![CDATA[
{assign var=running_total value=$running_total+$some_array[$row].some_value}
]]>
  </programlisting>

 </example>

<example>
  <title>{assign} in the scope of calling template</title>
  <para>Variables assigned in the included template will be seen in the including template.</para>
  <programlisting>
<![CDATA[
{include file="sub_template.tpl"}
...
{* display variable assigned in sub_template *}
{$foo}<br>
...
]]>
  </programlisting>
  <para>The template above includes the example <filename>sub_template.tpl</filename> below</para>
  <programlisting>
<![CDATA[
...
{* foo will be known also in the including template *}
{assign var="foo" value="something" scope=parent}
{* bar is assigned only local in the including template *}
{assign var="bar" value="value"}
...
]]>
</programlisting>
</example>
 
 <example>
  <title>{assign} a variable to current scope tree</title>
  <para>You can assign a variable to root of the current root tree. The variable is seen by all templates using the same root tree.</para>
  <programlisting>
<![CDATA[
{assign var=foo value="bar" scope="root"}
]]>
  </programlisting>
  
 </example>
 
 <example>
  <title>{assign} a global variable</title>
  <para>A global variable is seen by all templates.</para>
  <programlisting>
<![CDATA[
{assign var=foo value="bar" scope="global"}
{assign "foo" "bar" scope="global"} {* short-hand *}
]]>
  </programlisting>
  
 </example>
 
 <example>
  <title>Accessing {assign} variables from a PHP script</title>
  <para>
  To access <varname>{assign}</varname> variables from a php script use
    <link linkend="api.get.template.vars">
    <varname>getTemplateVars()</varname></link>.
    Here's the template that creates the variable <parameter>$foo</parameter>.
  </para>
<programlisting>
<![CDATA[
{assign var="foo" value="Smarty"}
]]>
</programlisting>
<para>The template variables are only available after/during template
execution as in the following script.
</para>
<programlisting role="php">
<![CDATA[
<?php

// this will output nothing as the template has not been executed
echo $smarty->getTemplateVars('foo');

// fetch the template to a variable
$whole_page = $smarty->fetch('index.tpl');

// this will output 'smarty' as the template has been executed
echo $smarty->getTemplateVars('foo');

$smarty->assign('foo','Even smarter');

// this will output 'Even smarter'
echo $smarty->getTemplateVars('foo');

?>
]]>
</programlisting>
 </example>


 <para>
 The following functions can also <emphasis>optionally</emphasis> assign
 template variables.
  </para>

 <para>
  <link linkend="language.function.capture"><varname>{capture}</varname></link>,
  <link linkend="language.function.include"><varname>{include}</varname></link>,
  <link linkend="language.function.include.php"><varname>{include_php}</varname></link>,
  <link linkend="language.function.insert"><varname>{insert}</varname></link>,
 <link linkend="language.function.counter"><varname>{counter}</varname></link>,
 <link linkend="language.function.cycle"><varname>{cycle}</varname></link>,
 <link linkend="language.function.eval"><varname>{eval}</varname></link>,
 <link linkend="language.function.fetch"><varname>{fetch}</varname></link>,
 <link linkend="language.function.math"><varname>{math}</varname></link>,
 <link linkend="language.function.textformat"><varname>{textformat}</varname></link>
 </para>

 <para>
 See also
  <link linkend="language.function.shortform.assign"><varname>{$var=...}</varname></link>,
 <link linkend="api.assign"><varname>assign()</varname></link>
   and
  <link linkend="api.get.template.vars"><varname>getTemplateVars()</varname></link>.
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
