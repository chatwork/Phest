<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4822 $ -->
<sect1 id="language.escaping">
 <title>Escaping Smarty Parsing</title>
 <para>
  It is sometimes desirable or even necessary to have Smarty ignore sections it
  would otherwise parse. A classic example is embedding Javascript or CSS code in
  a template. The problem arises as those languages use the { and } characters
  which are also the default
  <link linkend="language.function.ldelim">delimiters</link> for Smarty.
 </para>

 <note><para>
  A good practice for avoiding escapement altogether is by separating your Javascript/CSS
  into their own files and use standard HTML methods to access them. This will also take
  advantage of browser script caching. When you need to embed Smarty variables/functions
  into your Javascript/CSS, then the following applies.
 </para></note>

 <para>
  In Smarty templates, the { and } braces will be ignored so long as they are surrounded by white space.
  This behavior can be disabled by setting the Smarty class variable <link linkend="variable.auto.literal"><parameter>$auto_literal</parameter></link> to false.
 </para>
 
 <example>
  <title>Using the auto-literal feature</title>
  <programlisting>
<![CDATA[
<script>
   // the following braces are ignored by Smarty
   // since they are surrounded by whitespace
   function foobar {
	alert('foobar!');
   }
   // this one will need literal escapement
   {literal}
	function bazzy {alert('foobar!');}
   {/literal}
</script>
]]>  
 </programlisting>
 </example>
 
 <para>
  <link linkend="language.function.literal">
  <varname>{literal}..{/literal}</varname></link> blocks are used for escaping blocks of template logic.
  You can also escape the braces individually with <link linkend="language.function.ldelim"><varname>{ldelim}</varname></link>,<link linkend="language.function.ldelim"><varname>{rdelim}</varname></link> tags or <link linkend="language.variables.smarty.ldelim">
  <varname>{$smarty.ldelim}</varname>,<varname>{$smarty.rdelim}</varname></link> variables.
 </para>

 <para>
  Smarty's default delimiters { and } cleanly represent presentational content. However if another set of delimiters suit your
  needs better, you can change them with Smarty's <link linkend="variable.left.delimiter">
  <parameter>$left_delimiter</parameter></link> and
  <link linkend="variable.right.delimiter">
  <parameter>$right_delimiter</parameter></link> values.
  <note>
    <para>
      Changing delimiters affects ALL template syntax and escapement. Be sure to clear out cache and compiled files
      if you decide to change them.
    </para>
  </note>
 </para>
 <example>
  <title>changing delimiters example</title>
  <programlisting role="php">
<![CDATA[
<?php

$smarty->left_delimiter = '<!--{';
$smarty->right_delimiter = '}-->';

$smarty->assign('foo', 'bar');
$smarty->assign('name', 'Albert');
$smarty->display('example.tpl');

?>
]]>
  </programlisting>
  <para>
   Where the template is:
  </para>
  <programlisting>
<![CDATA[
Welcome <!--{$name}--> to Smarty
<script language="javascript">
  var foo = <!--{$foo}-->;
  function dosomething() {
    alert("foo is " + foo);
  }
  dosomething();
</script>
]]>
  </programlisting>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
