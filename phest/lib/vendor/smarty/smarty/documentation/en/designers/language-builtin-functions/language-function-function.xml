<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 4483 $ -->
<sect1 id="language.function.function">
 <title>{function}</title>
 <para>
  <varname>{function}</varname> is used to create functions within a template
  and call them just like a plugin function. Instead of writing a plugin that 
  generates presentational content, keeping it in the template is often a more 
  manageable choice. It also simplifies data traversal, such as deeply nested menus. 
  </para>

  <note><para>
   Template functions are defined global. Since the Smarty compiler is a single-pass compiler,
   The <link linkend="language.function.call"><varname>{call}</varname></link>
   tag must be used to call a template function defined externally from the given template. 
   Otherwise you can directly use the function as <literal>{funcname ...}</literal> in the template.
  </para></note>

  <itemizedlist>
   <listitem><para>
    The <varname>{function}</varname> tag must have
    the  <parameter>name</parameter> attribute
    which contains the the name of the template function.
    A tag with this name can be used to call the template function.
   </para></listitem>
      
   <listitem><para>
  Default values for variables can be passed to the template function as
  <link linkend="language.syntax.attributes">attributes</link>.
 Like in PHP function declarations you can only use scalar values as default.
 The default values can be overwritten when the template function is being
 called.
 </para></listitem>

 <listitem><para>
  You can use all variables from the calling template inside the template function. 
  Changes to variables or new created variables inside the template function
  have local scope and are not visible inside the calling template after the 
  template function is executed.
  </para></listitem>
 </itemizedlist>
    
   <para><emphasis role="bold">Attributes:</emphasis></para>
   <informaltable frame="all">
    <tgroup cols="5">
     <colspec colname="param" align="center" />
     <colspec colname="type" align="center" />
     <colspec colname="required" align="center" />
     <colspec colname="default" align="center" />
     <colspec colname="desc" />
     <thead>
      <row>
       <entry>Attribute Name</entry>
       <entry>Type</entry>
       <entry>Required</entry>
       <entry>Default</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
    <row>
     <entry>name</entry>
     <entry>string</entry>
     <entry>Yes</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>The name of the template function</entry>
    </row>
    <row>
     <entry>[var ...]</entry>
     <entry>[var type]</entry>
     <entry>No</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>default variable value to pass local to the template function</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <note><para>
  You can pass any number of parameter to the template function when it is called. The parameter variables
  must not be declared in the <literal>{funcname ...}</literal> tag unless you what to use default values.
  Default values must be scalar and can not be variable. Variables must be passed when the template is called.
 </para></note>
 
 <example>
  <title>Recursive menu {function} example</title>
  <programlisting>
<![CDATA[
{* define the function *}
{function name=menu level=0}
{function menu level=0}          {* short-hand *}
  <ul class="level{$level}">
  {foreach $data as $entry}
    {if is_array($entry)}
      <li>{$entry@key}</li>
      {menu data=$entry level=$level+1}
    {else}
      <li>{$entry}</li>
    {/if}
  {/foreach}
  </ul>
{/function}

{* create an array to demonstrate *}
{$menu = ['item1','item2','item3' => ['item3-1','item3-2','item3-3' =>
['item3-3-1','item3-3-2']],'item4']}

{* run the array through the function *}
{menu data=$menu}
]]>
  </programlisting>
 <para>
  Will generate the following output
 </para> 
  <programlisting>
<![CDATA[
* item1
* item2
* item3
      o item3-1
      o item3-2
      o item3-3
            + item3-3-1
            + item3-3-2
* item4
]]>
  </programlisting>
 </example>

  <para>
  See also
  <link linkend="language.function.call"><varname>{call}</varname></link>
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

